{"version":3,"file":"zodiac.js","sources":["../src/events/eventBus.ts","../src/options.ts","../src/components/componentBase.ts","../src/utilities.ts","../src/components/autoplay.ts","../src/components/controls.ts","../src/components/itemState.ts","../src/components/track.ts","../src/components/drag.ts","../src/zodiac.ts"],"sourcesContent":["/**\n * Defines a zodiac slider event.\n */\nexport interface EventInterface {\n  /**\n   * The callback function for the event.\n   */\n  callback: CallableFunction;\n\n  /**\n   * The name of the event.\n   */\n  name: string;\n}\n\n/**\n * Provides an event bus for tracking slider related events.\n */\nexport class EventBus {\n\n  /**\n   * A list of subscribed events.\n   */\n  protected events: EventInterface[];\n\n  constructor() {\n    this.events = [];\n  }\n\n  /**\n   * Emits events by name with arguments for the callback function.\n   *\n   * @param names - The event names to emit.\n   * @param args - Arguments for the callback function.\n   */\n  public emit(names: string[], ...args: unknown[]): void {\n    names.forEach((name) => {\n      this.filterByName(name).forEach((event) => {\n        event.callback(...args);\n      });\n    });\n  }\n\n  /**\n   * Unsubscribes event(s) by name(s).\n   *\n   * @param names - A list of event names to unsubscribe.\n   */\n  public off(names: string[]): void {\n    for (const name of names) {\n      this.events = this.events.filter((event) => event.name !== name);\n    }\n  }\n\n  /**\n   * Subscribes an event with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   */\n  public on(names: string[], callback: CallableFunction): void {\n    names.forEach((name) => this.events.push({name, callback}));\n  }\n\n  /**\n   * Filter events by name.\n   *\n   * @param name - The name to filter by.\n   *\n   * @returns The result event set.\n   */\n  protected filterByName(name: string): EventInterface[] {\n    return this.events.filter((event) => event.name === name);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\n\n/**\n * A collection of classes used by the slider to identify specific elements.\n *\n * These classes cannot be set in the media query options.\n */\nexport interface ClassesInterface {\n\n  /**\n   * The class used for the inner slider container.\n   */\n  inner?: string;\n\n  /**\n   * The class used by the slider items.\n   */\n  items?: string;\n\n  /**\n   * The class for the track slider div surrounding the items.\n   */\n  track?: string;\n\n}\n\n/**\n * A collection of options used to configure the slider.\n */\nexport interface OptionsInterface {\n\n  /**\n   * Whether or not the slider should autoplay.\n   */\n  autoplay?: boolean;\n\n  /**\n   * The delay before the carousel will transition.\n   */\n  autoplaySpeed?: number;\n\n  /**\n   * A collection of classes used by the slider to identify specific elements.\n   *\n   * These classes cannot be set in the media query options.\n   */\n  classes?: ClassesInterface;\n\n  /**\n   * The gap between slides.\n   */\n  gap?: number;\n\n  /**\n   * The total number of items to display per view.\n   */\n  itemsPerView?: number;\n\n  /**\n   * The media queries configured with options.\n   */\n  mediaQueryLists?: {\n\n    [key: string]: MediaQueryList;\n\n  };\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  mediaQueryOptions?: MediaQueryOptionsInterface;\n\n  /**\n   * Whether or not autoplay should pause on hover.\n   */\n  pauseOnHover?: boolean;\n\n  /**\n   * The speed at which slides will transition.\n   */\n  transitionSpeed?: number;\n\n}\n\n/**\n * A collection of options applied at the specific media query.\n */\nexport interface MediaQueryOptionsInterface {\n\n  [key: string]: OptionsInterface;\n\n}\n\n/**\n * The media queries configured with options.\n */\nexport interface MediaQueryListsInterface {\n\n  /**\n   * The `MediaQueryList` for the supplied options.\n   */\n  mediaQueryList: MediaQueryList;\n\n  /**\n   * The options for the provided `MediaQueryList`.\n   */\n  options: OptionsInterface;\n}\n\n/**\n * An object used to configure the slider.\n */\nexport class Options {\n\n  /**\n   * The base options unrestricted by any media query.\n   */\n  protected baseOptions: OptionsInterface = {\n    autoplay: true,\n    autoplaySpeed: 5000,\n    classes: {\n      inner: 'zodiac-inner',\n      items: 'zodiac-item',\n      track: 'zodiac-track',\n    },\n    gap: 8,\n    itemsPerView: 5,\n    pauseOnHover: true,\n    transitionSpeed: 500,\n  };\n\n  /**\n   * The active options based on the computed media queries.\n   */\n  protected effectiveOptions: OptionsInterface;\n\n  /**\n   * The event bus.\n   *\n   * The event bus is used to notify when a media query has changed.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The media queries configured with options.\n   */\n  protected mediaQueryLists: MediaQueryListsInterface[] = [];\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  protected mediaQueryOptions: MediaQueryOptionsInterface = {};\n\n  /**\n   * Constructs a slider option set.\n   *\n   * A default set of options is used if no user options are provided.\n   *\n   * @throws {@link TypeError}\n   * Throws an error if any `classes` options are found in the\n   * `mediaQueryOptions`.\n   *\n   * @param eventBus - The event bus.\n   * @param options - The user supplied options.\n   */\n  public constructor(eventBus: EventBus, options: OptionsInterface = {}) {\n    this.eventBus = eventBus;\n\n    // Override the default base options with those provided by the user.\n    Object.assign(this.baseOptions, options);\n\n    // Check if any media query options were provided.\n    if (options.mediaQueryOptions) {\n      const mediaQueryOptions = options.mediaQueryOptions;\n\n      for (const [mediaQuery, mediaQueryOptionSet] of Object.entries(mediaQueryOptions)) {\n        if (mediaQueryOptionSet) {\n          const mediaQueryList = matchMedia(mediaQuery);\n\n          if (this.hasClasses(mediaQueryOptionSet.classes)) {\n            throw new TypeError('The classes property can only be set once.');\n          }\n\n          this.mediaQueryLists.push({\n            mediaQueryList,\n            options: mediaQueryOptionSet,\n          });\n\n          mediaQueryList.addEventListener('change', () => {\n            this.rebuildEffectiveOptions();\n          });\n        }\n      }\n    }\n\n    this.rebuildEffectiveOptions();\n  }\n\n  /**\n   * Gets the effective options.\n   *\n   * @returns The effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.effectiveOptions;\n  }\n\n  /**\n   * Checks if a `ClassesInterface` has any properties set.\n   *\n   * @param classes - The `ClassesInterface` to evaulate.\n   *\n   * @returns True if the interface has any properties otherwise false.\n   */\n  protected hasClasses(classes: ClassesInterface): boolean {\n    return classes && Object.values(classes).some((item) => item);\n  }\n\n  /**\n   * Rebuilds the effective options.\n   *\n   * If there are any matching media query options, they will override the base\n   * options.\n   */\n  protected rebuildEffectiveOptions() {\n    this.eventBus.emit(['rebuildEffectiveOptions.before']);\n\n    const effectiveOptions = Object.assign({}, this.baseOptions);\n\n    for (const list of this.mediaQueryLists) {\n      if (list.mediaQueryList.matches) {\n        Object.assign(effectiveOptions, list.options);\n      }\n    }\n\n    this.effectiveOptions = Object.freeze(effectiveOptions);\n\n    this.eventBus.emit(['rebuildEffectiveOptions.after']);\n  }\n\n}\n","import { OptionsInterface } from '../options';\n\nimport Zodiac from '../zodiac';\n\n/**\n * Defines the structure of a component.\n *\n * Components in Zodiac are used to compartmentalize specific areas of concern\n * within the slider. Functionality that is common between all components is\n * placed in the base `Zodiac` instance.\n */\nexport interface ComponentInterface {\n\n  /**\n   * Mounts the component to the slider.\n   */\n  mount(zodiac: Zodiac): void;\n\n}\n\n/**\n * A base implementation of ComponentInterface.\n * @api\n */\nexport abstract class ComponentBase implements ComponentInterface {\n\n  /**\n   * The slider's options.\n   */\n  protected options: OptionsInterface;\n\n  /**\n   * The slider instance.\n   */\n  protected zodiac: Zodiac;\n\n  /**\n   * {@inheritDoc ComponentInterface.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    this.zodiac = zodiac;\n    this.options = this.zodiac.getEffectiveOptions();\n  }\n\n}\n\n// The constructor for the `UpdateEffectiveOptions` mixin. The `any` type is\n// required for the mixin's constructor.\n// @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype UpdateEffectiveOptionsContructor = new (...args: any[]) => ComponentBase;\n\n/**\n * A mixin that rebuilds the options when they are changed.\n *\n * @returns A mixin that rebuilds the effective options.\n */\nexport function UpdateEffectiveOptions<TBase extends UpdateEffectiveOptionsContructor>(Base: TBase) {\n  return class UpdatingEffectiveOptions extends Base {\n\n    public mount(zodiac: Zodiac): void {\n      super.mount(zodiac);\n\n      this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n        this.zodiac.getEventBus().emit(['updateEffectiveOptions.before']);\n        this.options = this.zodiac.getEffectiveOptions();\n        this.zodiac.getEventBus().emit(['updateEffectiveOptions.after']);\n      });\n    }\n\n  };\n}\n","/**\n * A collection of static helper methods.\n */\nexport class Utilities {\n\n  /**\n   * CSS selectors for focusable elements.\n   */\n  public static readonly focusableSelectors = [\n    '* a',\n    '* area',\n    '* input',\n    '* select',\n    '* textarea',\n    '* button',\n    '* iframe',\n    '* object',\n    '* embed',\n    '* *[tabindex]',\n    '* *[contenteditable]',\n  ];\n\n  /**\n   * Generates an array of numbers starting at a given position.\n   *\n   * @param size - The size of the array to generate.\n   * @param startAt - The position to start at.\n   *\n   * @returns The generated array.\n   */\n  public static range(size: number, startAt = 0): number[] {\n    return [...Array(size).keys()].map((index) => index + startAt);\n  }\n\n  /**\n   * Maps a number in an input range to a number in an output range.\n   *\n   * This method takes an input number that exists with a specific range, and\n   * outputs a number scaled to an output range.\n   *\n   * @see {@link https://math.stackexchange.com/questions/377169/going-from-a-value-inside-1-1-to-a-value-in-another-range}\n   *\n   * @param item - The original number within the input range.\n   * @param inMin - The minimum number in the input range.\n   * @param inMax - The maximum number in the input range.\n   * @param outMin - The minimum number in the output range.\n   * @param outMax - The maximum number in the output range.\n   *\n   * @returns The new number within the output range.\n   */\n  public static rangeMap(item: number, inMin: number, inMax: number, outMin: number, outMax: number): number {\n    return (item - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Adds autoplay capabilities to the slider.\n *\n * When mounted, this component will have the following possible side effects:\n * - Auto-rotation will be started (if configured correctly)\n * - Auto-rotation will be paused when the slider is being dragged\n * - Auto-rotation will be paused when a focusable element is focused\n * - Auto-rotation will be conditionally paused when hovering over the slider\n *\n * @see Utilities.focusableSelectors\n *   For a description of what qualifies as a \"focusable\" element.\n */\nexport class Autoplay extends ComponentBase {\n\n  /**\n   * The autoplay interval ID.\n   */\n  protected interval: NodeJS.Timeout;\n\n  /**\n   * An `AbortController` for resetting the mouse events in `this.pauseOnHover()`.\n   */\n  protected abortController: AbortController;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.abortController = new AbortController();\n\n    this.start();\n    this.pauseOnDrag();\n    this.pauseOnFocus();\n    this.pauseOnHover();\n\n    // Reconfigure autoplay and pause on hover configuration when the options\n    // are rebuilt.\n    this.zodiac.getEventBus().on(['updateEffectiveOptions.after'], () => {\n      this.abortController.abort();\n\n      this.abortController = new AbortController();\n\n      this.stop();\n      this.start();\n      this.pauseOnHover();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when the slider is being dragged.\n   */\n  protected pauseOnDrag(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.stop();\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.start();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when any focusable element is focused.\n   */\n  protected pauseOnFocus(): void {\n    const focusableSelectors = Utilities.focusableSelectors.join(', ');\n    const focusable = this.zodiac.getSliderElement().querySelectorAll<HTMLElement>(focusableSelectors);\n\n    focusable.forEach((element) => {\n      element.addEventListener('focusin', () => this.stop());\n      element.addEventListener('focusout', () => this.start());\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation on hover (if applicable).\n   *\n   * If `pauseOnHover` is true, the slider's auto-rotation will be stopped when\n   * the user's cursor enters the slider element, then resumed when it leaves.\n   */\n  protected pauseOnHover(): void {\n    if (!this.options.pauseOnHover) {\n      // This is a no-op method if pause on hover is not enabled.\n      return;\n    }\n\n    const sliderElement = this.zodiac.getSliderElement();\n\n    sliderElement.addEventListener('mouseenter', () => {\n      this.stop();\n    }, { signal: this.abortController.signal });\n    sliderElement.addEventListener('mouseleave', () => {\n      this.start();\n    }, { signal: this.abortController.signal });\n  }\n\n  /**\n   * Auto-rotates the slider using the configured interval.\n   */\n  protected start(): void {\n    const { autoplay, autoplaySpeed } = this.options;\n\n    // Check if autoplay is enabled with a positive interval duration.\n    if (autoplay && autoplaySpeed > 0) {\n      // Prevent multiple autoplay intervals from occurring simultaneously.\n      this.stop();\n\n      // Create an interval to continuously switch to the next item on a delay.\n      this.interval = setInterval(() => {\n        this.zodiac.getEventBus().emit(['autoplay.before']);\n        this.zodiac.next();\n        this.zodiac.getEventBus().emit(['autoplay.after']);\n      }, autoplaySpeed);\n    }\n  }\n\n  /**\n   * Stops the slider's auto-rotation (if applicable).\n   */\n  protected stop(): void {\n    clearInterval(this.interval);\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Adds UI control capabilities to the slider.\n */\nexport class Controls extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setUpControls();\n  }\n\n  /**\n   * Attaches navigation buttons to the next & previous slider controls.\n   */\n  protected setUpControls(): void {\n    const sliderElement = this.zodiac.getSliderElement();\n\n    const nextBtn = sliderElement.querySelector('[data-zodiac-direction=\"right\"]');\n\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => this.zodiac.next());\n    }\n\n    const prevBtn = sliderElement.querySelector('[data-zodiac-direction=\"left\"]');\n\n    if (prevBtn) {\n      prevBtn.addEventListener('click', () => this.zodiac.previous());\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Keeps the state of each item updated.\n */\nexport class ItemState extends ComponentBase {\n\n  /**\n   * The class that indicates an item is active.\n   */\n  protected readonly activeClass = 'active';\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setActiveClass();\n    this.setAccessibilityAttributes();\n    this.setInitialItemState();\n    this.adjustItemStateOnMove();\n  }\n\n  /**\n   * Adds the active class to an item.\n   *\n   * @param item - The element to apply the active class to.\n   */\n  protected addActiveClassToItem(item: HTMLElement): void {\n    item.classList.add(this.activeClass);\n  }\n\n  /**\n   * Adjusts each item's state by listening to slider events.\n   */\n  protected adjustItemStateOnMove(): void {\n    this.zodiac.getEventBus().on([\n      'move.after',\n      'drag.after',\n    ], () => {\n      this.setActiveClass();\n      this.setAccessibilityAttributes();\n    });\n  }\n\n  /**\n   * Removes the active class from each item in the slider.\n   */\n  protected removeActiveClass(): void {\n    this.zodiac.getItems().forEach((item) => item.classList.remove(this.activeClass));\n  }\n\n  /**\n   * Applies the appropriate attributes for accessibility to each item.\n   *\n   * Items that aren't currently visible will be set as hidden (using\n   * `aria-hidden`) and have a negative tab index applied to them.\n   */\n  protected setAccessibilityAttributes(): void {\n    const { itemsPerView } = this.options;\n    const position = this.zodiac.getPosition();\n\n    // Compute a range of visible slide positions based on the the number of\n    // items per view and the current position.\n    const visibleRange = Utilities.range(itemsPerView, position);\n\n    this.zodiac.getItems().forEach((item, index) => {\n      const visible = visibleRange.includes(index);\n\n      // This value must be converted to a string since `setAttribute()`\n      // expects `value` to be a string.\n      const ariaHidden = (!visible).toString();\n\n      item.setAttribute('aria-hidden', ariaHidden);\n      this.setTabindex(item, visible);\n\n      // Collect a list of focusable items within each slider item.\n      const focusableItems = item.querySelectorAll(Utilities.focusableSelectors.join(', '));\n\n      // Set the tab index for each focusable element within each slider item.\n      focusableItems.forEach((element: HTMLElement) => {\n        this.setTabindex(element, visible);\n      });\n    });\n  }\n\n  /**\n   * Sets the active class on the active item and removes it from the rest.\n   *\n   * There can only be one active item at a time. The active item is tracked by\n   * `Zodiac.getPosition()`.\n   */\n  protected setActiveClass(): void {\n    const currentPosition = this.zodiac.getPosition();\n\n    const activeItem = this.zodiac.getItems().item(currentPosition);\n    this.removeActiveClass();\n    this.addActiveClassToItem(activeItem);\n  }\n\n  /**\n   * Applies an indexing attribute to each item.\n   */\n  protected setInitialItemState(): void {\n    this.zodiac.getItems().forEach((item, index) => {\n      item.setAttribute('data-zodiac-item-index', (index + 1).toString());\n    });\n  }\n\n  /**\n   * Sets the tabindex of an element based on whether it is visible.\n   *\n   * @param element - The element to modify.\n   * @param visible - Whether or not the element is active.\n   */\n  protected setTabindex(element: HTMLElement, visible: boolean): void {\n    if (!visible) {\n      element.setAttribute('tabindex', '-1');\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Manipulates the width of the slider track and each slider item.\n */\nexport class Track extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setItemWidth();\n    this.setTrackWidth();\n    this.setTrackTransitionDuration();\n    this.updateTrackOnResize();\n  }\n\n  /**\n   * Gets the margin size for slider items by dividing the gap option in half.\n   *\n   * @returns The gap option value divided in half.\n   */\n  protected getSliderItemMargin(): number {\n    return this.options.gap / 2;\n  }\n\n  /**\n   * Retrieves the width of the slider's inner element.\n   *\n   * @returns The width of the slider.\n   */\n  protected getSliderWidth(): number {\n    const selector = this.options.classes.inner;\n    const inner = this.zodiac.getSliderElement().querySelector(`.${selector}`);\n\n    const { width } = inner.getBoundingClientRect();\n\n    return width;\n  }\n\n  /**\n   * Sets the width and margin of each slider item.\n   *\n   * Each slider item's width is calculated by dividing the slider's width by\n   * configured total items per view minus the configured gap setting.\n   */\n  protected setItemWidth(): void {\n    const { itemsPerView } = this.options;\n\n    // Calculate the width of each slider item by dividing the total size of\n    // the inner slider by the total items per view.\n    this.zodiac.setItemWidth(this.getSliderWidth() / itemsPerView);\n\n    const sliderItemMargin = this.getSliderItemMargin();\n\n    this.zodiac.getItems().forEach((item) => {\n      // Apply the width to the slide item.\n      item.style.width = `${this.zodiac.getItemWidth() - sliderItemMargin * 2}px`;\n\n      // Add spacing between each slider item with left and right margin.\n      item.style.marginLeft = `${sliderItemMargin}px`;\n      item.style.marginRight = `${sliderItemMargin}px`;\n    });\n  }\n\n  /**\n   * Applies the transition speed setting to the track.\n   */\n  protected setTrackTransitionDuration(): void {\n    const { transitionSpeed } = this.options;\n    this.zodiac.getTrackElement().style.transitionDuration = `${transitionSpeed}ms`;\n  }\n\n  /**\n   * Set the width of the track element.\n   *\n   * The width of track element is equal to the width of the slider multiplied\n   * by the total number of items.\n   */\n  protected setTrackWidth(): void {\n    const trackWidth = this.zodiac.getItemWidth() * this.zodiac.getItems().length;\n\n    this.zodiac.getTrackElement().style.width = `${trackWidth}px`;\n  }\n\n  /**\n   * Update the track and item width when the window is resized.\n   */\n  protected updateTrackOnResize(): void {\n    this.zodiac.getEventBus().on(['updateEffectiveOptions.after'], () => {\n      this.zodiac.getEventBus().emit(['trackUpdated.before']);\n      this.setItemWidth();\n      this.setTrackWidth();\n      this.setTrackTransitionDuration();\n      this.zodiac.getEventBus().emit(['trackUpdated.after']);\n    });\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\ntype DragEvent = MouseEvent | TouchEvent;\n\n/**\n * A map of events that will represent dragging.\n */\ninterface DragEventMap {\n  'mousedown': DragEvent,\n  'mousemove': DragEvent,\n  'mouseleave': DragEvent,\n  'mouseup': DragEvent,\n  'touchcancel': DragEvent,\n  'touchend': DragEvent,\n  'touchmove': DragEvent,\n  'touchstart': DragEvent,\n}\n\ntype EventKey = keyof DragEventMap;\n\n/**\n * Adds dragging capabilities to the slider (for both mouse & touch inputs).\n */\nexport class Drag extends ComponentBase {\n\n  /**\n   * The class used to indicate that the slider is being dragged.\n   */\n  protected readonly draggingClass = 'dragging';\n\n  /**\n   * The value used to track and apply the `translate` CSS while dragging.\n   */\n  protected dragPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.move()` method.\n   */\n  protected moveController: AbortController = null;\n\n  /**\n   * Events that move the slider when dragging.\n   */\n  protected readonly moveEventKeys: EventKey[] = [\n    'mousemove',\n    'touchmove',\n  ];\n\n  /**\n   * A flag used to determine whether the clicking of links is disallowed.\n   */\n  protected preventClick = false;\n\n  /**\n   * The position that will be given to `Zodiac` after the dragging has stopped.\n   */\n  protected snapPosition = 0;\n\n  /**\n   * Events that signal when dragging should begin.\n   */\n  protected readonly startEventKeys: EventKey[] = [\n    'mousedown',\n    'touchstart',\n  ];\n\n  /**\n   * The position of the event dispatcher at the start of the dragging process.\n   */\n  protected startingEventPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.stop()` method.\n   */\n  protected stopController: AbortController = null;\n\n  /**\n   * Events that signal when dragging should end.\n   */\n  protected readonly stopEventKeys: EventKey[] = [\n    'mouseup',\n    'mouseleave',\n    'touchend',\n    'touchcancel',\n  ];\n\n  /**\n   * How far the slider must be dragged before moving begins.\n   */\n  protected readonly threshold = 20;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.addStartEvents();\n    this.onDragEvents();\n    this.preventDefaultOnDragStart();\n    this.preventDefaultClickOnDragStart();\n  }\n\n  /**\n   * Applies the move events to the slider.\n   */\n  protected addMoveEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.moveController = new AbortController();\n\n    this.moveEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.move(event), { signal: this.moveController.signal });\n    });\n  }\n\n  /**\n   * Applies the start events to the slider.\n   */\n  protected addStartEvents(): void {\n    this.startEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.start(event));\n    });\n  }\n\n  /**\n   * Applies the stop events to the slider.\n   */\n  protected addStopEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.stopController = new AbortController();\n\n    this.stopEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, () => this.stop(), { signal: this.stopController.signal });\n    });\n  }\n\n  /**\n   * Retrieves the `screenX` value from an event depending on the event type.\n   *\n   * @param event - The event in which to derive the `screenX` value.\n   *\n   * @returns The `screenX` value of the event.\n   */\n  protected getScreenX(event: DragEvent): number {\n    if (event instanceof TouchEvent) {\n      return event.touches[0].screenX ?? 0;\n    }\n\n    return event.screenX;\n  }\n\n  /**\n   * Snaps a drag position into a valid `Zodiac` position.\n   *\n   * The `Drag` component tracks the drag position with a pixel value to\n   * animate dragging. This method snaps a drag position into valid `Zodiac`\n   * position to set the active slide.\n   *\n   * @param dragPosition - The position in pixels.\n   *\n   * @returns The position as a numeric index.\n   */\n  protected getSnapPosition(dragPosition: number): number {\n    let snapPosition = -Math.round(dragPosition / this.zodiac.getItemWidth());\n\n    const itemTotal = this.zodiac.getItemTotal();\n\n    // If the calculated position is greater than the total number of slider\n    // items then restart at the beginning.\n    if (snapPosition > itemTotal) {\n      snapPosition = 0;\n    }\n\n    // If the calculated position is less than zero then move to the end of\n    // the slider.\n    if (snapPosition < 0) {\n      snapPosition = itemTotal;\n    }\n\n    return snapPosition;\n  }\n\n  /**\n   * Mark all links within the slider track as draggable or un-draggable.\n   *\n   * Depending on the value of `draggable`, links within the slider track will\n   * be enabled or disabled by swapping between storing the link in an `href`\n   * or `data-href` attribute and toggling the `draggable` attribute.\n   *\n   * @param draggable - Whether to mark the items as draggable or un-draggable.\n   */\n  protected modifyLinks(draggable: boolean): void {\n    // Retrieve all links within the track element.\n    const links = this.zodiac.getTrackElement().querySelectorAll('a');\n\n    // Prevent unnecessary modification by checking if the draggable value\n    // matches the prevent click state.\n    if (this.preventClick === draggable) {\n      links.forEach((link) => {\n        // Determine the source and destination of the attribute modification\n        // based on the whether draggability is being enabled or disabled.\n        const source = draggable ? 'data-href' : 'href';\n        const destination = draggable ? 'href' : 'data-href';\n\n        // Add or remove the draggable attribute on the link element.\n        link.draggable = draggable;\n\n        link.setAttribute(destination, link.getAttribute(source));\n        link.removeAttribute(source);\n      });\n\n      // Indicate click has or hasn't been prevented.\n      this.preventClick = !this.preventClick;\n    }\n  }\n\n  /**\n   * Calculates & updates the position of the slider track on drag.\n   *\n   * During the move stage of the dragging, this method has the following side\n   * effects:\n   * - Calculates the dragging distance based on where the user clicked or\n   *   touched.\n   * - Determines how fast the slider should be dragged based on how close to\n   *   the edge the mouse cursor is moved.\n   * - Computes which slide to snap to after dragging is complete.\n   * - Animates the slider track while dragging.\n   *\n   * @param event - The DOM event emitted during the drag movement.\n   */\n  protected move(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.move.before']);\n\n    // Determine the distance between the position of current event dispatcher\n    // the starting event dispatcher position.\n    const currentEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n    const distance = currentEventPosition - this.startingEventPosition;\n\n    // Exit this method if the distance is less than the drag threshold.\n    if (Math.abs(distance) < this.threshold) {\n      return;\n    }\n\n    // Increase the acceleration speed based on how far the user has dragged\n    // the slider.\n    const accelerate = Utilities.rangeMap(Math.abs(distance), this.threshold, window.innerWidth, 1, 3);\n    // Determine by drag position by adding distance multiplied by the\n    // acceleration speed.\n    const dragPosition = this.dragPosition + (distance * accelerate);\n\n    event.preventDefault();\n\n    // Get the snap position from the current drag position.\n    this.snapPosition = this.getSnapPosition(dragPosition);\n    // Animate the dragging.\n    this.zodiac.getTrackElement().style.transform = `translate3d(${dragPosition}px, 0, 0)`;\n\n    this.zodiac.getEventBus().emit(['drag.move.after']);\n  }\n\n  /**\n   * Adds the `dragging` class to the slider track while it is being dragged.\n   */\n  protected onDragEvents(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.zodiac.getTrackElement().classList.add(this.draggingClass);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.zodiac.getTrackElement().classList.remove(this.draggingClass);\n    });\n  }\n\n  /**\n   * Prevent link clicking when the slider is being dragged.\n   */\n  protected preventDefaultClickOnDragStart(): void {\n    this.zodiac.getEventBus().on(['drag.move.before'], () => {\n      this.modifyLinks(false);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      // Wait for the slider to finishing animating before enabling the links.\n      setTimeout(() => {\n        this.modifyLinks(true);\n      }, this.options.transitionSpeed);\n    });\n  }\n\n  /**\n   * Prevents unnecessary dragging for slider items.\n   */\n  protected preventDefaultOnDragStart(): void {\n    this.zodiac.getItems().forEach((item) => {\n      item.addEventListener('dragstart', (event) => event.preventDefault());\n    });\n  }\n\n  /**\n   * Removes the move events from the slider to prevent unnecessary calculations.\n   */\n  protected removeMoveEvents(): void {\n    this.moveController.abort();\n  }\n\n  /**\n   * Removes the stop events from the slider to prevent unnecessary calculations.\n   */\n  protected removeStopEvents(): void {\n    this.stopController.abort();\n  }\n\n  /**\n   * Prepares the slider to be dragged when dragging has started.\n   *\n   * The slider is prepared by calculating the current drag position, relative\n   * to the `Zodiac`'s current position, and the position of the event\n   * dispatcher.\n   *\n   * @param event - The DOM event which fired this method.\n   */\n  protected start(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.before']);\n\n    // Calculate the drag position by multiplying the slider's current position\n    // by the width of a single slide. The value of this calculation is\n    // converted to a negative number to animate the slider since it will\n    // eventually be passed into `translate3d`.\n    this.dragPosition = -Math.abs(this.zodiac.getPosition() * this.zodiac.getItemWidth());\n\n    this.snapPosition = this.getSnapPosition(this.dragPosition);\n\n    // Determine the position of the event dispatcher by subtracting the event\n    // dispatcher's position on the screen by the slider's offset of it's\n    // parent element.\n    this.startingEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n\n    this.addMoveEvents();\n    this.addStopEvents();\n  }\n\n  /**\n   * Positions the slider after the dragging is complete.\n   */\n  protected stop(): void {\n    this.zodiac.setPosition(this.snapPosition);\n    this.zodiac.move(this.snapPosition);\n\n    this.removeMoveEvents();\n    this.removeStopEvents();\n\n    this.zodiac.getEventBus().emit(['drag.after']);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\nimport { Options, OptionsInterface } from './options';\n\nimport { ComponentInterface, UpdateEffectiveOptions } from './components/componentBase';\nimport { Autoplay } from './components/autoplay';\nimport { Controls } from './components/controls';\nimport { ItemState } from './components/itemState';\nimport { Track } from './components/track';\nimport { Drag } from './components/drag';\n\n/**\n * The entry point for the Zodiac Slider.\n *\n * This class contains all properties and methods shared between each component.\n *\n * Components are mounted in `Zodiac.mount()`. This function iterates over each\n * component, invoking their `mount()` method & supplying itself as an argument.\n */\nexport default class Zodiac {\n\n  /**\n   * The slider components.\n   */\n  protected components: ComponentInterface[];\n\n  /**\n   * The event bus.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The slider items.\n   */\n  protected items: NodeListOf<HTMLElement>;\n\n  /**\n   * The width of each slider item.\n   */\n  protected itemWidth: number;\n\n  /**\n   * The slider options.\n   */\n  protected options: Options;\n\n  /**\n   * The slider's current position in the item sequence (zero-indexed).\n   */\n  protected position: number;\n\n  /**\n   * The CSS selector for identifying the slider.\n   */\n  protected selector: string;\n\n  /**\n   * The element on which the slider has been initialized.\n   */\n  protected readonly sliderElement: HTMLElement;\n\n  /**\n   * The slider track element.\n   */\n  protected readonly trackElement: HTMLElement;\n\n  /**\n   * Constructs a `Zodiac` instance based on the provided selector and options.\n   *\n   * @param selector - The base selector to use.\n   * @param options - The options to initialize the slider with.\n   */\n  public constructor(selector: string, options?: OptionsInterface) {\n    this.eventBus = new EventBus();\n\n    this.selector = selector;\n    this.options = new Options(this.eventBus, options);\n\n    const effectiveOptions = this.options.getEffectiveOptions();\n\n    this.components = this.registerComponents();\n\n    this.sliderElement = document.querySelector(this.selector);\n    this.trackElement = this.sliderElement.querySelector(`.${effectiveOptions.classes.track}`);\n    this.items = this.sliderElement.querySelectorAll(`.${effectiveOptions.classes.items}`);\n\n    this.position = 0;\n\n    // Reposition the slider items on media query change.\n    this.eventBus.on(['trackUpdated.after'], () => this.next(0));\n  }\n\n  /**\n   * Retrieves the slider's effective options.\n   *\n   * @returns The slider's effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.options.getEffectiveOptions();\n  }\n\n  /**\n   * Retrieves the event bus.\n   *\n   * @returns The event bus.\n   */\n  public getEventBus(): EventBus {\n    return this.eventBus;\n  }\n\n  /**\n   * Retrieves the total number of items.\n   *\n   * @returns The total number of items offset by 1.\n   */\n  public getItemTotal(): number {\n    return this.items.length - 1;\n  }\n\n  /**\n   * Retrieves the width of a slider item.\n   *\n   * @returns The width of individual slider items.\n   */\n  public getItemWidth(): number {\n    return this.itemWidth;\n  }\n\n  /**\n   * Retrieves the slider's items.\n   *\n   * @returns The slider's items.\n   */\n  public getItems(): NodeListOf<HTMLElement> {\n    return this.items;\n  }\n\n  /**\n   * Retrieves the slider's position.\n   *\n   * @returns The position of the slider.\n   */\n  public getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Retrieves the slider element.\n   *\n   * @returns The slider element.\n   */\n  public getSliderElement(): HTMLElement {\n    return this.sliderElement;\n  }\n\n  /**\n   * Retrieves the track element.\n   *\n   * @returns The track element.\n   */\n  public getTrackElement(): HTMLElement {\n    return this.trackElement;\n  }\n\n  /**\n   * Mounts the sliders components.\n   *\n   * @param thirdPartyComponents - A list of user defined components.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public mount(thirdPartyComponents: ComponentInterface[] = []): this {\n    for (const component of this.components.concat(thirdPartyComponents)) {\n      component.mount(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the slider based on the provided offset.\n   *\n   * @param offset - The position to move the slider.\n   */\n  public move(offset: number): void {\n    const transform = -1 * (this.getItemWidth() * offset);\n\n    this.trackElement.style.transform = `translate3d(${transform}px, 0px, 0px)`;\n  }\n\n  /**\n   * Move to the next slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public next(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position + offset;\n\n    if (position > this.getItemTotal()) {\n      position = 0;\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Removes a custom event listener.\n   *\n   * @param names - A list of event names to unsubscribe.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public off(names: string[]): this {\n    this.eventBus.off(names);\n\n    return this;\n  }\n\n  /**\n   * Adds a custom event listener with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public on(names: string[], callback: CallableFunction): this {\n    this.eventBus.on(names, callback);\n\n    return this;\n  }\n\n  /**\n   * Move to the previous slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public previous(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position - offset;\n\n    if (position < 0) {\n      position = this.getItemTotal();\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Sets the width of individual slider items.\n   *\n   * @param itemWidth - The new item width.\n   */\n  public setItemWidth(itemWidth: number): void {\n    this.itemWidth = itemWidth;\n  }\n\n  /**\n   * Sets the sliders position.\n   *\n   * @throws {@link RangeError}\n   * Will throw an error if the position is `Nan`, less than zero, or greater\n   * than the total number of items.\n   *\n   * @param position - The position to set.\n   */\n  public setPosition(position: number): void {\n    if (Number.isNaN(position) || position < 0 || position > this.getItemTotal()) {\n      throw new RangeError(`Invalid position: ${position}`);\n    }\n\n    this.position = Math.trunc(position);\n  }\n\n  /**\n   * Registers the required components provided by Zodiac.\n   *\n   * @returns A list of instantiated components.\n   */\n  protected registerComponents(): ComponentInterface[] {\n    return [\n      ItemState,\n      UpdateEffectiveOptions(Track),\n      UpdateEffectiveOptions(Autoplay),\n      Controls,\n      UpdateEffectiveOptions(Drag),\n    ].map((Component) => new Component());\n  }\n\n}\n"],"names":["EventBus","_classCallCheck","events","_createClass","key","value","emit","names","_this","_len","arguments","length","args","Array","_key","forEach","name","filterByName","event","callback","apply","off","_this2","_iterator","_createForOfIteratorHelper","_step","_loop","filter","s","n","done","err","e","f","on","_this3","push","Options","eventBus","options","undefined","_defineProperty","autoplay","autoplaySpeed","classes","inner","items","track","gap","itemsPerView","pauseOnHover","transitionSpeed","Object","assign","baseOptions","mediaQueryOptions","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","mediaQuery","mediaQueryOptionSet","mediaQueryList","matchMedia","hasClasses","TypeError","mediaQueryLists","addEventListener","rebuildEffectiveOptions","getEffectiveOptions","effectiveOptions","values","some","item","list","matches","freeze","ComponentBase","mount","zodiac","UpdateEffectiveOptions","Base","_Base","_inherits","UpdatingEffectiveOptions","_super","_createSuper","_get","_getPrototypeOf","prototype","call","getEventBus","Utilities","range","size","startAt","_toConsumableArray","keys","map","index","rangeMap","inMin","inMax","outMin","outMax","Autoplay","_ComponentBase","abortController","AbortController","start","pauseOnDrag","pauseOnFocus","abort","stop","focusableSelectors","join","focusable","getSliderElement","querySelectorAll","element","_this4","sliderElement","signal","_this5","_this$options","interval","setInterval","next","clearInterval","Controls","setUpControls","nextBtn","querySelector","prevBtn","previous","ItemState","concat","_assertThisInitialized","setActiveClass","setAccessibilityAttributes","setInitialItemState","adjustItemStateOnMove","addActiveClassToItem","classList","add","activeClass","removeActiveClass","getItems","remove","position","getPosition","visibleRange","visible","includes","ariaHidden","toString","setAttribute","setTabindex","focusableItems","currentPosition","activeItem","removeAttribute","Track","setItemWidth","setTrackWidth","setTrackTransitionDuration","updateTrackOnResize","getSliderItemMargin","getSliderWidth","selector","_inner$getBoundingCli","getBoundingClientRect","width","sliderItemMargin","style","getItemWidth","marginLeft","marginRight","getTrackElement","transitionDuration","trackWidth","Drag","addStartEvents","onDragEvents","preventDefaultOnDragStart","preventDefaultClickOnDragStart","addMoveEvents","moveController","moveEventKeys","eventType","move","startEventKeys","addStopEvents","stopController","stopEventKeys","getScreenX","TouchEvent","_event$touches$0$scre","touches","screenX","getSnapPosition","dragPosition","snapPosition","Math","round","itemTotal","getItemTotal","modifyLinks","draggable","links","preventClick","link","source","destination","getAttribute","currentEventPosition","offsetLeft","distance","startingEventPosition","abs","threshold","accelerate","window","innerWidth","preventDefault","transform","draggingClass","_this6","setTimeout","removeMoveEvents","removeStopEvents","setPosition","Zodiac","components","registerComponents","document","trackElement","itemWidth","thirdPartyComponents","component","offset","Number","isNaN","RangeError","trunc","Component"],"mappings":"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"}