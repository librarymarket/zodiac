{"version":3,"file":"zodiac.esm.js","sources":["../src/events/eventBus.ts","../src/options.ts","../src/components/componentBase.ts","../src/utilities.ts","../src/components/autoplay.ts","../src/components/controls.ts","../src/components/itemState.ts","../src/components/track.ts","../src/components/drag.ts","../src/zodiac.ts"],"sourcesContent":["/**\n * Defines a zodiac slider event.\n */\nexport interface EventInterface {\n  /**\n   * The callback function for the event.\n   */\n  callback: CallableFunction;\n\n  /**\n   * The name of the event.\n   */\n  name: string;\n}\n\n/**\n * Provides an event bus for tracking slider related events.\n */\nexport class EventBus {\n\n  /**\n   * A list of subscribed events.\n   */\n  protected events: EventInterface[];\n\n  constructor() {\n    this.events = [];\n  }\n\n  /**\n   * Emits events by name with arguments for the callback function.\n   *\n   * @param names - The event names to emit.\n   * @param args - Arguments for the callback function.\n   */\n  public emit(names: string[], ...args: unknown[]): void {\n    names.forEach((name) => {\n      this.filterByName(name).forEach((event) => {\n        event.callback(...args);\n      });\n    });\n  }\n\n  /**\n   * Unsubscribes event(s) by name(s).\n   *\n   * @param names - A list of event names to unsubscribe.\n   */\n  public off(names: string[]): void {\n    for (const name of names) {\n      this.events = this.events.filter((event) => event.name !== name);\n    }\n  }\n\n  /**\n   * Subscribes an event with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   */\n  public on(names: string[], callback: CallableFunction): void {\n    names.forEach((name) => this.events.push({name, callback}));\n  }\n\n  /**\n   * Filter events by name.\n   *\n   * @param name - The name to filter by.\n   *\n   * @returns The result event set.\n   */\n  protected filterByName(name: string): EventInterface[] {\n    return this.events.filter((event) => event.name === name);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\n\n/**\n * A collection of classes used by the slider to identify specific elements.\n *\n * These classes cannot be set in the media query options.\n */\nexport interface ClassesInterface {\n\n  /**\n   * The class used for the inner slider container.\n   */\n  inner?: string;\n\n  /**\n   * The class used by the slider items.\n   */\n  items?: string;\n\n  /**\n   * The class for the track slider div surrounding the items.\n   */\n  track?: string;\n\n}\n\n/**\n * A collection of options used to configure the slider.\n */\nexport interface OptionsInterface {\n\n  /**\n   * Whether or not the slider should autoplay.\n   */\n  autoplay?: boolean;\n\n  /**\n   * The delay before the carousel will transition.\n   */\n  autoplaySpeed?: number;\n\n  /**\n   * A collection of classes used by the slider to identify specific elements.\n   *\n   * These classes cannot be set in the media query options.\n   */\n  classes?: ClassesInterface;\n\n  /**\n   * The gap between slides.\n   */\n  gap?: number;\n\n  /**\n   * The total number of items to display per view.\n   */\n  itemsPerView?: number;\n\n  /**\n   * The media queries configured with options.\n   */\n  mediaQueryLists?: {\n\n    [key: string]: MediaQueryList;\n\n  };\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  mediaQueryOptions?: MediaQueryOptionsInterface;\n\n  /**\n   * Whether or not autoplay should pause on hover.\n   */\n  pauseOnHover?: boolean;\n\n  /**\n   * The speed at which slides will transition.\n   */\n  transitionSpeed?: number;\n\n}\n\n/**\n * A collection of options applied at the specific media query.\n */\nexport interface MediaQueryOptionsInterface {\n\n  [key: string]: OptionsInterface;\n\n}\n\n/**\n * The media queries configured with options.\n */\nexport interface MediaQueryListsInterface {\n\n  /**\n   * The `MediaQueryList` for the supplied options.\n   */\n  mediaQueryList: MediaQueryList;\n\n  /**\n   * The options for the provided `MediaQueryList`.\n   */\n  options: OptionsInterface;\n}\n\n/**\n * An object used to configure the slider.\n */\nexport class Options {\n\n  /**\n   * The base options unrestricted by any media query.\n   */\n  protected baseOptions: OptionsInterface = {\n    autoplay: true,\n    autoplaySpeed: 5000,\n    classes: {\n      inner: 'zodiac-inner',\n      items: 'zodiac-item',\n      track: 'zodiac-track',\n    },\n    gap: 8,\n    itemsPerView: 5,\n    pauseOnHover: true,\n    transitionSpeed: 500,\n  };\n\n  /**\n   * The active options based on the computed media queries.\n   */\n  protected effectiveOptions: OptionsInterface;\n\n  /**\n   * The event bus.\n   *\n   * The event bus is used to notify when a media query has changed.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The media queries configured with options.\n   */\n  protected mediaQueryLists: MediaQueryListsInterface[] = [];\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  protected mediaQueryOptions: MediaQueryOptionsInterface = {};\n\n  /**\n   * Constructs a slider option set.\n   *\n   * A default set of options is used if no user options are provided.\n   *\n   * @throws {@link TypeError}\n   * Throws an error if any `classes` options are found in the\n   * `mediaQueryOptions`.\n   *\n   * @param eventBus - The event bus.\n   * @param options - The user supplied options.\n   */\n  public constructor(eventBus: EventBus, options: OptionsInterface = {}) {\n    this.eventBus = eventBus;\n\n    // Override the default base options with those provided by the user.\n    Object.assign(this.baseOptions, options);\n\n    // Check if any media query options were provided.\n    if (options.mediaQueryOptions) {\n      const mediaQueryOptions = options.mediaQueryOptions;\n\n      for (const [mediaQuery, mediaQueryOptionSet] of Object.entries(mediaQueryOptions)) {\n        if (mediaQueryOptionSet) {\n          const mediaQueryList = matchMedia(mediaQuery);\n\n          if (this.hasClasses(mediaQueryOptionSet.classes)) {\n            throw new TypeError('The classes property can only be set once.');\n          }\n\n          this.mediaQueryLists.push({\n            mediaQueryList,\n            options: mediaQueryOptionSet,\n          });\n\n          mediaQueryList.addEventListener('change', () => {\n            this.rebuildEffectiveOptions();\n          });\n        }\n      }\n    }\n\n    this.rebuildEffectiveOptions();\n  }\n\n  /**\n   * Gets the effective options.\n   *\n   * @returns The effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.effectiveOptions;\n  }\n\n  /**\n   * Checks if a `ClassesInterface` has any properties set.\n   *\n   * @param classes - The `ClassesInterface` to evaulate.\n   *\n   * @returns True if the interface has any properties otherwise false.\n   */\n  protected hasClasses(classes: ClassesInterface): boolean {\n    return classes && Object.values(classes).some((item) => item);\n  }\n\n  /**\n   * Rebuilds the effective options.\n   *\n   * If there are any matching media query options, they will override the base\n   * options.\n   */\n  protected rebuildEffectiveOptions() {\n    this.eventBus.emit(['rebuildEffectiveOptions.before']);\n\n    const effectiveOptions = Object.assign({}, this.baseOptions);\n\n    for (const list of this.mediaQueryLists) {\n      if (list.mediaQueryList.matches) {\n        Object.assign(effectiveOptions, list.options);\n      }\n    }\n\n    this.effectiveOptions = Object.freeze(effectiveOptions);\n\n    this.eventBus.emit(['rebuildEffectiveOptions.after']);\n  }\n\n}\n","import { OptionsInterface } from '../options';\n\nimport Zodiac from '../zodiac';\n\n/**\n * Defines the structure of a component.\n *\n * Components in Zodiac are used to compartmentalize specific areas of concern\n * within the slider. Functionality that is common between all components is\n * placed in the base `Zodiac` instance.\n */\nexport interface ComponentInterface {\n\n  /**\n   * Mounts the component to the slider.\n   */\n  mount(zodiac: Zodiac): void;\n\n}\n\n/**\n * A base implementation of ComponentInterface.\n * @api\n */\nexport abstract class ComponentBase implements ComponentInterface {\n\n  /**\n   * The slider's options.\n   */\n  protected options: OptionsInterface;\n\n  /**\n   * The slider instance.\n   */\n  protected zodiac: Zodiac;\n\n  /**\n   * {@inheritDoc ComponentInterface.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    this.zodiac = zodiac;\n    this.options = this.zodiac.getEffectiveOptions();\n  }\n\n}\n\n// The constructor for the `UpdateEffectiveOptions` mixin. The `any` type is\n// required for the mixin's constructor.\n// @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype UpdateEffectiveOptionsContructor = new (...args: any[]) => ComponentBase;\n\n/**\n * A mixin that rebuilds the options when they are changed.\n *\n * @returns A mixin that rebuilds the effective options.\n */\nexport function UpdateEffectiveOptions<TBase extends UpdateEffectiveOptionsContructor>(Base: TBase) {\n  return class UpdatingEffectiveOptions extends Base {\n\n    public mount(zodiac: Zodiac): void {\n      super.mount(zodiac);\n\n      this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n        this.options = this.zodiac.getEffectiveOptions();\n      });\n    }\n\n  };\n}\n","/**\n * A collection of static helper methods.\n */\nexport class Utilities {\n\n  /**\n   * CSS selectors for focusable elements.\n   */\n  public static readonly focusableSelectors = [\n    '* a',\n    '* area',\n    '* input',\n    '* select',\n    '* textarea',\n    '* button',\n    '* iframe',\n    '* object',\n    '* embed',\n    '* *[tabindex]',\n    '* *[contenteditable]',\n  ];\n\n  /**\n   * Generates an array of numbers starting at a given position.\n   *\n   * @param size - The size of the array to generate.\n   * @param startAt - The position to start at.\n   *\n   * @returns The generated array.\n   */\n  public static range(size: number, startAt = 0): number[] {\n    return [...Array(size).keys()].map((index) => index + startAt);\n  }\n\n  /**\n   * Maps a number in an input range to a number in an output range.\n   *\n   * This method takes an input number that exists with a specific range, and\n   * outputs a number scaled to an output range.\n   *\n   * @see {@link https://math.stackexchange.com/questions/377169/going-from-a-value-inside-1-1-to-a-value-in-another-range}\n   *\n   * @param item - The original number within the input range.\n   * @param inMin - The minimum number in the input range.\n   * @param inMax - The maximum number in the input range.\n   * @param outMin - The minimum number in the output range.\n   * @param outMax - The maximum number in the output range.\n   *\n   * @returns The new number within the output range.\n   */\n  public static rangeMap(item: number, inMin: number, inMax: number, outMin: number, outMax: number): number {\n    return (item - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Adds autoplay capabilities to the slider.\n *\n * When mounted, this component will have the following possible side effects:\n * - Auto-rotation will be started (if configured correctly)\n * - Auto-rotation will be paused when the slider is being dragged\n * - Auto-rotation will be paused when a focusable element is focused\n * - Auto-rotation will be conditionally paused when hovering over the slider\n *\n * @see Utilities.focusableSelectors\n *   For a description of what qualifies as a \"focusable\" element.\n */\nexport class Autoplay extends ComponentBase {\n\n  /**\n   * The autoplay interval ID.\n   */\n  protected interval: NodeJS.Timeout;\n\n  /**\n   * An `AbortController` for resetting the mouse events in `this.pauseOnHover()`.\n   */\n  protected abortController: AbortController;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.abortController = new AbortController();\n\n    this.start();\n    this.pauseOnDrag();\n    this.pauseOnFocus();\n    this.pauseOnHover();\n\n    // Reconfigure autoplay and pause on hover configuration when the options\n    // are rebuilt.\n    this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n      this.abortController.abort();\n\n      this.abortController = new AbortController();\n\n      this.stop();\n      this.start();\n      this.pauseOnHover();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when the slider is being dragged.\n   */\n  protected pauseOnDrag(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.stop();\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.start();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when any focusable element is focused.\n   */\n  protected pauseOnFocus(): void {\n    const focusableSelectors = Utilities.focusableSelectors.join(', ');\n    const focusable = this.zodiac.getSliderElement().querySelectorAll<HTMLElement>(focusableSelectors);\n\n    focusable.forEach((element) => {\n      element.addEventListener('focusin', () => this.stop());\n      element.addEventListener('focusout', () => this.start());\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation on hover (if applicable).\n   *\n   * If `pauseOnHover` is true, the slider's auto-rotation will be stopped when\n   * the user's cursor enters the slider element, then resumed when it leaves.\n   */\n  protected pauseOnHover(): void {\n    if (!this.options.pauseOnHover) {\n      // This is a no-op method if pause on hover is not enabled.\n      return;\n    }\n\n    const sliderElement = this.zodiac.getSliderElement();\n\n    sliderElement.addEventListener('mouseenter', () => {\n      this.stop();\n    }, { signal: this.abortController.signal });\n    sliderElement.addEventListener('mouseleave', () => {\n      this.start();\n    }, { signal: this.abortController.signal });\n  }\n\n  /**\n   * Auto-rotates the slider using the configured interval.\n   */\n  protected start(): void {\n    const { autoplay, autoplaySpeed } = this.options;\n\n    // Check if autoplay is enabled with a positive interval duration.\n    if (autoplay && autoplaySpeed > 0) {\n      // Prevent multiple autoplay intervals from occurring simultaneously.\n      this.stop();\n\n      // Create an interval to continuously switch to the next item on a delay.\n      this.interval = setInterval(() => {\n        this.zodiac.getEventBus().emit(['autoplay.before']);\n        this.zodiac.next();\n        this.zodiac.getEventBus().emit(['autoplay.after']);\n      }, autoplaySpeed);\n    }\n  }\n\n  /**\n   * Stops the slider's auto-rotation (if applicable).\n   */\n  protected stop(): void {\n    clearInterval(this.interval);\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Adds UI control capabilities to the slider.\n */\nexport class Controls extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setUpControls();\n  }\n\n  /**\n   * Attaches navigation buttons to the next & previous slider controls.\n   */\n  protected setUpControls(): void {\n    const sliderElement = this.zodiac.getSliderElement();\n\n    const nextBtn = sliderElement.querySelector('[data-zodiac-direction=\"right\"]');\n\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => this.zodiac.next());\n    }\n\n    const prevBtn = sliderElement.querySelector('[data-zodiac-direction=\"left\"]');\n\n    if (prevBtn) {\n      prevBtn.addEventListener('click', () => this.zodiac.previous());\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Keeps the state of each item updated.\n */\nexport class ItemState extends ComponentBase {\n\n  /**\n   * The class that indicates an item is active.\n   */\n  protected readonly activeClass = 'active';\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setActiveClass();\n    this.setAccessibilityAttributes();\n    this.setInitialItemState();\n    this.adjustItemStateOnMove();\n  }\n\n  /**\n   * Adds the active class to an item.\n   *\n   * @param item - The element to apply the active class to.\n   */\n  protected addActiveClassToItem(item: HTMLElement): void {\n    item.classList.add(this.activeClass);\n  }\n\n  /**\n   * Adjusts each item's state by listening to slider events.\n   */\n  protected adjustItemStateOnMove(): void {\n    this.zodiac.getEventBus().on([\n      'move.after',\n      'drag.after',\n    ], () => {\n      this.setActiveClass();\n      this.setAccessibilityAttributes();\n    });\n  }\n\n  /**\n   * Removes the active class from each item in the slider.\n   */\n  protected removeActiveClass(): void {\n    this.zodiac.getItems().forEach((item) => item.classList.remove(this.activeClass));\n  }\n\n  /**\n   * Applies the appropriate attributes for accessibility to each item.\n   *\n   * Items that aren't currently visible will be set as hidden (using\n   * `aria-hidden`) and have a negative tab index applied to them.\n   */\n  protected setAccessibilityAttributes(): void {\n    const { itemsPerView } = this.options;\n    const position = this.zodiac.getPosition();\n\n    // Compute a range of visible slide positions based on the the number of\n    // items per view and the current position.\n    const visibleRange = Utilities.range(itemsPerView, position);\n\n    this.zodiac.getItems().forEach((item, index) => {\n      const visible = visibleRange.includes(index);\n\n      // This value must be converted to a string since `setAttribute()`\n      // expects `value` to be a string.\n      const ariaHidden = (!visible).toString();\n\n      item.setAttribute('aria-hidden', ariaHidden);\n      this.setTabindex(item, visible);\n\n      // Collect a list of focusable items within each slider item.\n      const focusableItems = item.querySelectorAll(Utilities.focusableSelectors.join(', '));\n\n      // Set the tab index for each focusable element within each slider item.\n      focusableItems.forEach((element: HTMLElement) => {\n        this.setTabindex(element, visible);\n      });\n    });\n  }\n\n  /**\n   * Sets the active class on the active item and removes it from the rest.\n   *\n   * There can only be one active item at a time. The active item is tracked by\n   * `Zodiac.getPosition()`.\n   */\n  protected setActiveClass(): void {\n    const currentPosition = this.zodiac.getPosition();\n\n    const activeItem = this.zodiac.getItems().item(currentPosition);\n    this.removeActiveClass();\n    this.addActiveClassToItem(activeItem);\n  }\n\n  /**\n   * Applies an indexing attribute to each item.\n   */\n  protected setInitialItemState(): void {\n    this.zodiac.getItems().forEach((item, index) => {\n      item.setAttribute('data-zodiac-item-index', (index + 1).toString());\n    });\n  }\n\n  /**\n   * Sets the tabindex of an element based on whether it is visible.\n   *\n   * @param element - The element to modify.\n   * @param visible - Whether or not the element is active.\n   */\n  protected setTabindex(element: HTMLElement, visible: boolean): void {\n    if (!visible) {\n      element.setAttribute('tabindex', '-1');\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Manipulates the width of the slider track and each slider item.\n */\nexport class Track extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setItemWidth();\n    this.setTrackWidth();\n    this.setTrackTransitionDuration();\n    this.updateTrackOnResize();\n  }\n\n  /**\n   * Gets the margin size for slider items by dividing the gap option in half.\n   *\n   * @returns The gap option value divided in half.\n   */\n  protected getSliderItemMargin(): number {\n    return this.options.gap / 2;\n  }\n\n  /**\n   * Retrieves the width of the slider's inner element.\n   *\n   * @returns The width of the slider.\n   */\n  protected getSliderWidth(): number {\n    const selector = this.options.classes.inner;\n    const inner = this.zodiac.getSliderElement().querySelector(`.${selector}`);\n\n    const { width } = inner.getBoundingClientRect();\n\n    return width;\n  }\n\n  /**\n   * Sets the width and margin of each slider item.\n   *\n   * Each slider item's width is calculated by dividing the slider's width by\n   * configured total items per view minus the configured gap setting.\n   */\n  protected setItemWidth(): void {\n    const { itemsPerView } = this.options;\n\n    // Calculate the width of each slider item by dividing the total size of\n    // the inner slider by the total items per view.\n    this.zodiac.setItemWidth(this.getSliderWidth() / itemsPerView);\n\n    const sliderItemMargin = this.getSliderItemMargin();\n\n    this.zodiac.getItems().forEach((item) => {\n      // Apply the width to the slide item.\n      item.style.width = `${this.zodiac.getItemWidth() - sliderItemMargin * 2}px`;\n\n      // Add spacing between each slider item with left and right margin.\n      item.style.marginLeft = `${sliderItemMargin}px`;\n      item.style.marginRight = `${sliderItemMargin}px`;\n    });\n  }\n\n  /**\n   * Applies the transition speed setting to the track.\n   */\n  protected setTrackTransitionDuration(): void {\n    const { transitionSpeed } = this.options;\n    this.zodiac.getTrackElement().style.transitionDuration = `${transitionSpeed}ms`;\n  }\n\n  /**\n   * Set the width of the track element.\n   *\n   * The width of track element is equal to the width of the slider multiplied\n   * by the total number of items.\n   */\n  protected setTrackWidth(): void {\n    const trackWidth = this.zodiac.getItemWidth() * this.zodiac.getItems().length;\n\n    this.zodiac.getTrackElement().style.width = `${trackWidth}px`;\n  }\n\n  /**\n   * Update the track and item width when the window is resized.\n   */\n  protected updateTrackOnResize(): void {\n    this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n      this.zodiac.getEventBus().emit(['trackUpdated.before']);\n      this.setItemWidth();\n      this.setTrackWidth();\n      this.setTrackTransitionDuration();\n      this.zodiac.getEventBus().emit(['trackUpdated.after']);\n    });\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\ntype DragEvent = MouseEvent | TouchEvent;\n\n/**\n * A map of events that will represent dragging.\n */\ninterface DragEventMap {\n  'mousedown': DragEvent,\n  'mousemove': DragEvent,\n  'mouseleave': DragEvent,\n  'mouseup': DragEvent,\n  'touchcancel': DragEvent,\n  'touchend': DragEvent,\n  'touchmove': DragEvent,\n  'touchstart': DragEvent,\n}\n\ntype EventKey = keyof DragEventMap;\n\n/**\n * Adds dragging capabilities to the slider (for both mouse & touch inputs).\n */\nexport class Drag extends ComponentBase {\n\n  /**\n   * The class used to indicate that the slider is being dragged.\n   */\n  protected readonly draggingClass = 'dragging';\n\n  /**\n   * The value used to track and apply the `translate` CSS while dragging.\n   */\n  protected dragPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.move()` method.\n   */\n  protected moveController: AbortController = null;\n\n  /**\n   * Events that move the slider when dragging.\n   */\n  protected readonly moveEventKeys: EventKey[] = [\n    'mousemove',\n    'touchmove',\n  ];\n\n  /**\n   * A flag used to determine whether the clicking of links is disallowed.\n   */\n  protected preventClick = false;\n\n  /**\n   * The position that will be given to `Zodiac` after the dragging has stopped.\n   */\n  protected snapPosition = 0;\n\n  /**\n   * Events that signal when dragging should begin.\n   */\n  protected readonly startEventKeys: EventKey[] = [\n    'mousedown',\n    'touchstart',\n  ];\n\n  /**\n   * The position of the event dispatcher at the start of the dragging process.\n   */\n  protected startingEventPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.stop()` method.\n   */\n  protected stopController: AbortController = null;\n\n  /**\n   * Events that signal when dragging should end.\n   */\n  protected readonly stopEventKeys: EventKey[] = [\n    'mouseup',\n    'mouseleave',\n    'touchend',\n    'touchcancel',\n  ];\n\n  /**\n   * How far the slider must be dragged before moving begins.\n   */\n  protected readonly threshold = 20;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.addStartEvents();\n    this.onDragEvents();\n    this.preventDefaultOnDragStart();\n    this.preventDefaultClickOnDragStart();\n  }\n\n  /**\n   * Applies the move events to the slider.\n   */\n  protected addMoveEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.moveController = new AbortController();\n\n    this.moveEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.move(event), { signal: this.moveController.signal });\n    });\n  }\n\n  /**\n   * Applies the start events to the slider.\n   */\n  protected addStartEvents(): void {\n    this.startEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.start(event));\n    });\n  }\n\n  /**\n   * Applies the stop events to the slider.\n   */\n  protected addStopEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.stopController = new AbortController();\n\n    this.stopEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, () => this.stop(), { signal: this.stopController.signal });\n    });\n  }\n\n  /**\n   * Retrieves the `screenX` value from an event depending on the event type.\n   *\n   * @param event - The event in which to derive the `screenX` value.\n   *\n   * @returns The `screenX` value of the event.\n   */\n  protected getScreenX(event: DragEvent): number {\n    if (event instanceof TouchEvent) {\n      return event.touches[0].screenX ?? 0;\n    }\n\n    return event.screenX;\n  }\n\n  /**\n   * Snaps a drag position into a valid `Zodiac` position.\n   *\n   * The `Drag` component tracks the drag position with a pixel value to\n   * animate dragging. This method snaps a drag position into valid `Zodiac`\n   * position to set the active slide.\n   *\n   * @param dragPosition - The position in pixels.\n   *\n   * @returns The position as a numeric index.\n   */\n  protected getSnapPosition(dragPosition: number): number {\n    let snapPosition = -Math.round(dragPosition / this.zodiac.getItemWidth());\n\n    const itemTotal = this.zodiac.getItemTotal();\n\n    // If the calculated position is greater than the total number of slider\n    // items then restart at the beginning.\n    if (snapPosition > itemTotal) {\n      snapPosition = 0;\n    }\n\n    // If the calculated position is less than zero then move to the end of\n    // the slider.\n    if (snapPosition < 0) {\n      snapPosition = itemTotal;\n    }\n\n    return snapPosition;\n  }\n\n  /**\n   * Mark all links within the slider track as draggable or un-draggable.\n   *\n   * Depending on the value of `draggable`, links within the slider track will\n   * be enabled or disabled by swapping between storing the link in an `href`\n   * or `data-href` attribute and toggling the `draggable` attribute.\n   *\n   * @param draggable - Whether to mark the items as draggable or un-draggable.\n   */\n  protected modifyLinks(draggable: boolean): void {\n    // Retrieve all links within the track element.\n    const links = this.zodiac.getTrackElement().querySelectorAll('a');\n\n    // Prevent unnecessary modification by checking if the draggable value\n    // matches the prevent click state.\n    if (this.preventClick === draggable) {\n      links.forEach((link) => {\n        // Determine the source and destination of the attribute modification\n        // based on the whether draggability is being enabled or disabled.\n        const source = draggable ? 'data-href' : 'href';\n        const destination = draggable ? 'href' : 'data-href';\n\n        // Add or remove the draggable attribute on the link element.\n        link.draggable = draggable;\n\n        link.setAttribute(destination, link.getAttribute(source));\n        link.removeAttribute(source);\n      });\n\n      // Indicate click has or hasn't been prevented.\n      this.preventClick = !this.preventClick;\n    }\n  }\n\n  /**\n   * Calculates & updates the position of the slider track on drag.\n   *\n   * During the move stage of the dragging, this method has the following side\n   * effects:\n   * - Calculates the dragging distance based on where the user clicked or\n   *   touched.\n   * - Determines how fast the slider should be dragged based on how close to\n   *   the edge the mouse cursor is moved.\n   * - Computes which slide to snap to after dragging is complete.\n   * - Animates the slider track while dragging.\n   *\n   * @param event - The DOM event emitted during the drag movement.\n   */\n  protected move(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.move.before']);\n\n    // Determine the distance between the position of current event dispatcher\n    // the starting event dispatcher position.\n    const currentEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n    const distance = currentEventPosition - this.startingEventPosition;\n\n    // Exit this method if the distance is less than the drag threshold.\n    if (Math.abs(distance) < this.threshold) {\n      return;\n    }\n\n    // Increase the acceleration speed based on how far the user has dragged\n    // the slider.\n    const accelerate = Utilities.rangeMap(Math.abs(distance), this.threshold, window.innerWidth, 1, 3);\n    // Determine by drag position by adding distance multiplied by the\n    // acceleration speed.\n    const dragPosition = this.dragPosition + (distance * accelerate);\n\n    event.preventDefault();\n\n    // Get the snap position from the current drag position.\n    this.snapPosition = this.getSnapPosition(dragPosition);\n    // Animate the dragging.\n    this.zodiac.getTrackElement().style.transform = `translate3d(${dragPosition}px, 0, 0)`;\n\n    this.zodiac.getEventBus().emit(['drag.move.after']);\n  }\n\n  /**\n   * Adds the `dragging` class to the slider track while it is being dragged.\n   */\n  protected onDragEvents(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.zodiac.getTrackElement().classList.add(this.draggingClass);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.zodiac.getTrackElement().classList.remove(this.draggingClass);\n    });\n  }\n\n  /**\n   * Prevent link clicking when the slider is being dragged.\n   */\n  protected preventDefaultClickOnDragStart(): void {\n    this.zodiac.getEventBus().on(['drag.move.before'], () => {\n      this.modifyLinks(false);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      // Wait for the slider to finishing animating before enabling the links.\n      setTimeout(() => {\n        this.modifyLinks(true);\n      }, this.options.transitionSpeed);\n    });\n  }\n\n  /**\n   * Prevents unnecessary dragging for slider items.\n   */\n  protected preventDefaultOnDragStart(): void {\n    this.zodiac.getItems().forEach((item) => {\n      item.addEventListener('dragstart', (event) => event.preventDefault());\n    });\n  }\n\n  /**\n   * Removes the move events from the slider to prevent unnecessary calculations.\n   */\n  protected removeMoveEvents(): void {\n    this.moveController.abort();\n  }\n\n  /**\n   * Removes the stop events from the slider to prevent unnecessary calculations.\n   */\n  protected removeStopEvents(): void {\n    this.stopController.abort();\n  }\n\n  /**\n   * Prepares the slider to be dragged when dragging has started.\n   *\n   * The slider is prepared by calculating the current drag position, relative\n   * to the `Zodiac`'s current position, and the position of the event\n   * dispatcher.\n   *\n   * @param event - The DOM event which fired this method.\n   */\n  protected start(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.before']);\n\n    // Calculate the drag position by multiplying the slider's current position\n    // by the width of a single slide. The value of this calculation is\n    // converted to a negative number to animate the slider since it will\n    // eventually be passed into `translate3d`.\n    this.dragPosition = -Math.abs(this.zodiac.getPosition() * this.zodiac.getItemWidth());\n\n    // Determine the position of the event dispatcher by subtracting the event\n    // dispatcher's position on the screen by the slider's offset of it's\n    // parent element.\n    this.startingEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n\n    this.addMoveEvents();\n    this.addStopEvents();\n  }\n\n  /**\n   * Positions the slider after the dragging is complete.\n   */\n  protected stop(): void {\n    this.zodiac.setPosition(this.snapPosition);\n    this.zodiac.move(this.snapPosition);\n\n    this.removeMoveEvents();\n    this.removeStopEvents();\n\n    this.zodiac.getEventBus().emit(['drag.after']);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\nimport { Options, OptionsInterface } from './options';\n\nimport { ComponentInterface, UpdateEffectiveOptions } from './components/componentBase';\nimport { Autoplay } from './components/autoplay';\nimport { Controls } from './components/controls';\nimport { ItemState } from './components/itemState';\nimport { Track } from './components/track';\nimport { Drag } from './components/drag';\n\n/**\n * The entry point for the Zodiac Slider.\n *\n * This class contains all properties and methods shared between each component.\n *\n * Components are mounted in `Zodiac.mount()`. This function iterates over each\n * component, invoking their `mount()` method & supplying itself as an argument.\n */\nexport default class Zodiac {\n\n  /**\n   * The slider components.\n   */\n  protected components: ComponentInterface[];\n\n  /**\n   * The event bus.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The slider items.\n   */\n  protected items: NodeListOf<HTMLElement>;\n\n  /**\n   * The width of each slider item.\n   */\n  protected itemWidth: number;\n\n  /**\n   * The slider options.\n   */\n  protected options: Options;\n\n  /**\n   * The slider's current position in the item sequence (zero-indexed).\n   */\n  protected position: number;\n\n  /**\n   * The CSS selector for identifying the slider.\n   */\n  protected selector: string;\n\n  /**\n   * The element on which the slider has been initialized.\n   */\n  protected readonly sliderElement: HTMLElement;\n\n  /**\n   * The slider track element.\n   */\n  protected readonly trackElement: HTMLElement;\n\n  /**\n   * Constructs a `Zodiac` instance based on the provided selector and options.\n   *\n   * @param selector - The base selector to use.\n   * @param options - The options to initialize the slider with.\n   */\n  public constructor(selector: string, options?: OptionsInterface) {\n    this.eventBus = new EventBus();\n\n    this.selector = selector;\n    this.options = new Options(this.eventBus, options);\n\n    const effectiveOptions = this.options.getEffectiveOptions();\n\n    this.components = this.registerComponents();\n\n    this.sliderElement = document.querySelector(this.selector);\n    this.trackElement = this.sliderElement.querySelector(`.${effectiveOptions.classes.track}`);\n    this.items = this.sliderElement.querySelectorAll(`.${effectiveOptions.classes.items}`);\n\n    this.position = 0;\n\n    // Reposition the slider items on media query change.\n    this.eventBus.on(['trackUpdated.after'], () => this.next(0));\n  }\n\n  /**\n   * Retrieves the slider's effective options.\n   *\n   * @returns The slider's effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.options.getEffectiveOptions();\n  }\n\n  /**\n   * Retrieves the event bus.\n   *\n   * @returns The event bus.\n   */\n  public getEventBus(): EventBus {\n    return this.eventBus;\n  }\n\n  /**\n   * Retrieves the total number of items.\n   *\n   * @returns The total number of items offset by 1.\n   */\n  public getItemTotal(): number {\n    return this.items.length - 1;\n  }\n\n  /**\n   * Retrieves the width of a slider item.\n   *\n   * @returns The width of individual slider items.\n   */\n  public getItemWidth(): number {\n    return this.itemWidth;\n  }\n\n  /**\n   * Retrieves the slider's items.\n   *\n   * @returns The slider's items.\n   */\n  public getItems(): NodeListOf<HTMLElement> {\n    return this.items;\n  }\n\n  /**\n   * Retrieves the slider's position.\n   *\n   * @returns The position of the slider.\n   */\n  public getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Retrieves the slider element.\n   *\n   * @returns The slider element.\n   */\n  public getSliderElement(): HTMLElement {\n    return this.sliderElement;\n  }\n\n  /**\n   * Retrieves the track element.\n   *\n   * @returns The track element.\n   */\n  public getTrackElement(): HTMLElement {\n    return this.trackElement;\n  }\n\n  /**\n   * Mounts the sliders components.\n   *\n   * @param thirdPartyComponents - A list of user defined components.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public mount(thirdPartyComponents: ComponentInterface[] = []): this {\n    for (const component of this.components.concat(thirdPartyComponents)) {\n      component.mount(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the slider based on the provided offset.\n   *\n   * @param offset - The position to move the slider.\n   */\n  public move(offset: number): void {\n    const transform = -1 * (this.getItemWidth() * offset);\n\n    this.trackElement.style.transform = `translate3d(${transform}px, 0px, 0px)`;\n  }\n\n  /**\n   * Move to the next slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public next(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position + offset;\n\n    if (position > this.getItemTotal()) {\n      position = 0;\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Removes a custom event listener.\n   *\n   * @param names - A list of event names to unsubscribe.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public off(names: string[]): this {\n    this.eventBus.off(names);\n\n    return this;\n  }\n\n  /**\n   * Adds a custom event listener with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public on(names: string[], callback: CallableFunction): this {\n    this.eventBus.on(names, callback);\n\n    return this;\n  }\n\n  /**\n   * Move to the previous slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public previous(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position - offset;\n\n    if (position < 0) {\n      position = this.getItemTotal();\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Sets the width of individual slider items.\n   *\n   * @param itemWidth - The new item width.\n   */\n  public setItemWidth(itemWidth: number): void {\n    this.itemWidth = itemWidth;\n  }\n\n  /**\n   * Sets the sliders position.\n   *\n   * @throws {@link RangeError}\n   * Will throw an error if the position is `Nan`, less than zero, or greater\n   * than the total number of items.\n   *\n   * @param position - The position to set.\n   */\n  public setPosition(position: number): void {\n    if (Number.isNaN(position) || position < 0 || position > this.getItemTotal()) {\n      throw new RangeError(`Invalid position: ${position}`);\n    }\n\n    this.position = Math.trunc(position);\n  }\n\n  /**\n   * Registers the required components provided by Zodiac.\n   *\n   * @returns A list of instantiated components.\n   */\n  protected registerComponents(): ComponentInterface[] {\n    return [\n      ItemState,\n      UpdateEffectiveOptions(Track),\n      UpdateEffectiveOptions(Autoplay),\n      Controls,\n      UpdateEffectiveOptions(Drag),\n    ].map((Component) => new Component());\n  }\n\n}\n"],"names":["EventBus","events","names","args","forEach","name","filterByName","event","callback","filter","push","Options","eventBus","options","autoplay","autoplaySpeed","classes","inner","items","track","gap","itemsPerView","pauseOnHover","transitionSpeed","Object","assign","baseOptions","mediaQueryOptions","entries","mediaQuery","mediaQueryOptionSet","mediaQueryList","matchMedia","hasClasses","TypeError","mediaQueryLists","addEventListener","rebuildEffectiveOptions","effectiveOptions","values","some","item","emit","list","matches","freeze","ComponentBase","zodiac","getEffectiveOptions","UpdateEffectiveOptions","Base","getEventBus","on","Utilities","size","startAt","Array","keys","map","index","inMin","inMax","outMin","outMax","Autoplay","abortController","AbortController","start","pauseOnDrag","pauseOnFocus","abort","stop","focusableSelectors","join","focusable","getSliderElement","querySelectorAll","element","sliderElement","signal","interval","setInterval","next","clearInterval","Controls","setUpControls","nextBtn","querySelector","prevBtn","previous","ItemState","setActiveClass","setAccessibilityAttributes","setInitialItemState","adjustItemStateOnMove","classList","add","activeClass","getItems","remove","position","getPosition","visibleRange","range","visible","includes","ariaHidden","toString","setAttribute","setTabindex","focusableItems","currentPosition","activeItem","removeActiveClass","addActiveClassToItem","removeAttribute","Track","setItemWidth","setTrackWidth","setTrackTransitionDuration","updateTrackOnResize","selector","getBoundingClientRect","width","getSliderWidth","sliderItemMargin","getSliderItemMargin","style","getItemWidth","marginLeft","marginRight","getTrackElement","transitionDuration","trackWidth","length","Drag","addStartEvents","onDragEvents","preventDefaultOnDragStart","preventDefaultClickOnDragStart","moveController","moveEventKeys","eventType","move","startEventKeys","stopController","stopEventKeys","TouchEvent","touches","screenX","dragPosition","snapPosition","Math","round","itemTotal","getItemTotal","draggable","links","preventClick","link","source","destination","getAttribute","currentEventPosition","getScreenX","offsetLeft","distance","startingEventPosition","abs","threshold","accelerate","rangeMap","window","innerWidth","preventDefault","getSnapPosition","transform","draggingClass","modifyLinks","setTimeout","addMoveEvents","addStopEvents","setPosition","removeMoveEvents","removeStopEvents","Zodiac","components","registerComponents","document","trackElement","itemWidth","thirdPartyComponents","concat","component","mount","offset","off","Number","isNaN","RangeError","trunc","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAaA;AACA;AACA;AACA,IAAaA,QAAQ,gBAAA,YAAA;AAEnB;AACF;AACA;;EAGE,SAAc,QAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE,CAAA;AAClB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,MAAA;IAAA,KAMA,EAAA,SAAA,IAAA,CAAYC,KAAe,EAA4B;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;AAAA,MAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAvBC,IAAI,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;QAAJA,IAAI,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;AAAA,OAAA;AAClCD,MAAAA,KAAK,CAACE,OAAO,CAAC,UAACC,IAAI,EAAK;QACtB,KAAI,CAACC,YAAY,CAACD,IAAI,CAAC,CAACD,OAAO,CAAC,UAACG,KAAK,EAAK;AACzCA,UAAAA,KAAK,CAACC,QAAQ,CAAA,KAAA,CAAdD,KAAK,EAAaJ,IAAI,CAAC,CAAA;AACzB,SAAC,CAAC,CAAA;AACJ,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;IAAA,KAKA,EAAA,SAAA,GAAA,CAAWD,KAAe,EAAQ;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAAA,MAAA,IAAA,SAAA,GAAA,0BAAA,CACbA,KAAK,CAAA;AAAA,QAAA,KAAA,CAAA;AAAA,MAAA,IAAA;QAAA,IAAE,KAAA,GAAA,SAAA,KAAA,GAAA;AAAA,UAAA,IAAfG,IAAI,GAAA,KAAA,CAAA,KAAA,CAAA;UACb,MAAI,CAACJ,MAAM,GAAG,MAAI,CAACA,MAAM,CAACQ,MAAM,CAAC,UAACF,KAAK,EAAA;AAAA,YAAA,OAAKA,KAAK,CAACF,IAAI,KAAKA,IAAI,CAAA;WAAC,CAAA,CAAA;SACjE,CAAA;AAFD,QAAA,KAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,SAAA;AAEC,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,OAAA,SAAA;AAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,OAAA;AACH,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,IAAA;AAAA,IAAA,KAAA,EAMA,SAAUH,EAAAA,CAAAA,KAAe,EAAEM,QAA0B,EAAQ;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC3DN,MAAAA,KAAK,CAACE,OAAO,CAAC,UAACC,IAAI,EAAA;AAAA,QAAA,OAAK,MAAI,CAACJ,MAAM,CAACS,IAAI,CAAC;AAACL,UAAAA,IAAI,EAAJA,IAAI;AAAEG,UAAAA,QAAQ,EAARA,QAAAA;AAAQ,SAAC,CAAC,CAAA;OAAC,CAAA,CAAA;AAC7D,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AANE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;IAAA,KAOA,EAAA,SAAA,YAAA,CAAuBH,IAAY,EAAoB;AACrD,MAAA,OAAO,IAAI,CAACJ,MAAM,CAACQ,MAAM,CAAC,UAACF,KAAK,EAAA;AAAA,QAAA,OAAKA,KAAK,CAACF,IAAI,KAAKA,IAAI,CAAA;OAAC,CAAA,CAAA;AAC3D,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,QAAA,CAAA;AAAA,CAAA,EAAA;;ACvEH;AACA;AACA;AACA;AACA;;AAoBA;AACA;AACA;;AAwDA;AACA;AACA;;AAOA;AACA;AACA;;AAcA;AACA;AACA;AACA,IAAaM,OAAO,gBAAA,YAAA;AAElB;AACF;AACA;;AA2BE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,SAAA,OAAA,CAAmBC,QAAkB,EAAkC;AAAA,IAAA,IAAA,KAAA,GAAA,IAAA,CAAA;IAAA,IAAhCC,OAAyB,GAAG,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAE,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;IAAA,eAhD3B,CAAA,IAAA,EAAA,aAAA,EAAA;AACxCC,MAAAA,QAAQ,EAAE,IAAI;AACdC,MAAAA,aAAa,EAAE,IAAI;AACnBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,cAAc;AACrBC,QAAAA,KAAK,EAAE,aAAa;AACpBC,QAAAA,KAAK,EAAE,cAAA;OACR;AACDC,MAAAA,GAAG,EAAE,CAAC;AACNC,MAAAA,YAAY,EAAE,CAAC;AACfC,MAAAA,YAAY,EAAE,IAAI;AAClBC,MAAAA,eAAe,EAAE,GAAA;KAClB,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAiBuD,EAAE,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAKA,EAAE,CAAA,CAAA;IAe1D,IAAI,CAACX,QAAQ,GAAGA,QAAQ,CAAA;;AAExB;IACAY,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,WAAW,EAAEb,OAAO,CAAC,CAAA;;AAExC;IACA,IAAIA,OAAO,CAACc,iBAAiB,EAAE;AAC7B,MAAA,IAAMA,iBAAiB,GAAGd,OAAO,CAACc,iBAAiB,CAAA;AAEnD,MAAA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAA,eAAA,GAAgDH,MAAM,CAACI,OAAO,CAACD,iBAAiB,CAAC,EAAE,EAAA,GAAA,eAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AAA9E,QAAA,IAAA,kBAAA,GAAA,cAAA,CAAA,eAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;UAAOE,UAAU,GAAA,kBAAA,CAAA,CAAA,CAAA;UAAEC,mBAAmB,GAAA,kBAAA,CAAA,CAAA,CAAA,CAAA;AACzC,QAAA,IAAIA,mBAAmB,EAAE;AACvB,UAAA,IAAMC,cAAc,GAAGC,UAAU,CAACH,UAAU,CAAC,CAAA;UAE7C,IAAI,IAAI,CAACI,UAAU,CAACH,mBAAmB,CAACd,OAAO,CAAC,EAAE;AAChD,YAAA,MAAM,IAAIkB,SAAS,CAAC,4CAA4C,CAAC,CAAA;AACnE,WAAA;AAEA,UAAA,IAAI,CAACC,eAAe,CAACzB,IAAI,CAAC;AACxBqB,YAAAA,cAAc,EAAdA,cAAc;AACdlB,YAAAA,OAAO,EAAEiB,mBAAAA;AACX,WAAC,CAAC,CAAA;AAEFC,UAAAA,cAAc,CAACK,gBAAgB,CAAC,QAAQ,EAAE,YAAM;YAC9C,KAAI,CAACC,uBAAuB,EAAE,CAAA;AAChC,WAAC,CAAC,CAAA;AACJ,SAAA;AACF,OAAA;AACF,KAAA;IAEA,IAAI,CAACA,uBAAuB,EAAE,CAAA;AAChC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,EAAA,YAAA,CAAA,OAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,qBAAA;AAAA,IAAA,KAAA,EAKA,SAA+C,mBAAA,GAAA;MAC7C,OAAO,IAAI,CAACC,gBAAgB,CAAA;AAC9B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AANE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;IAAA,KAOA,EAAA,SAAA,UAAA,CAAqBtB,OAAyB,EAAW;AACvD,MAAA,OAAOA,OAAO,IAAIQ,MAAM,CAACe,MAAM,CAACvB,OAAO,CAAC,CAACwB,IAAI,CAAC,UAACC,IAAI,EAAA;AAAA,QAAA,OAAKA,IAAI,CAAA;OAAC,CAAA,CAAA;AAC/D,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,yBAAA;AAAA,IAAA,KAAA,EAMA,SAAoC,uBAAA,GAAA;MAClC,IAAI,CAAC7B,QAAQ,CAAC8B,IAAI,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAA;AAEtD,MAAA,IAAMJ,gBAAgB,GAAGd,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACC,WAAW,CAAC,CAAA;MAAC,IAE1C,SAAA,GAAA,0BAAA,CAAA,IAAI,CAACS,eAAe,CAAA;AAAA,QAAA,KAAA,CAAA;AAAA,MAAA,IAAA;QAAvC,KAAyC,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,UAAA,IAA9BQ,IAAI,GAAA,KAAA,CAAA,KAAA,CAAA;AACb,UAAA,IAAIA,IAAI,CAACZ,cAAc,CAACa,OAAO,EAAE;YAC/BpB,MAAM,CAACC,MAAM,CAACa,gBAAgB,EAAEK,IAAI,CAAC9B,OAAO,CAAC,CAAA;AAC/C,WAAA;AACF,SAAA;AAAC,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,OAAA,SAAA;AAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,OAAA;MAED,IAAI,CAACyB,gBAAgB,GAAGd,MAAM,CAACqB,MAAM,CAACP,gBAAgB,CAAC,CAAA;MAEvD,IAAI,CAAC1B,QAAQ,CAAC8B,IAAI,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAA;AACvD,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,OAAA,CAAA;AAAA,CAAA,EAAA;;AC1OH;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA,IAAsBI,aAAa,gBAAA,YAAA;AAAA,EAAA,SAAA,aAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,aAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA;AAEjC;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AACE,IAAA,SAAA,KAAA,CAAaC,MAAc,EAAQ;MACjC,IAAI,CAACA,MAAM,GAAGA,MAAM,CAAA;MACpB,IAAI,CAAClC,OAAO,GAAG,IAAI,CAACkC,MAAM,CAACC,mBAAmB,EAAE,CAAA;AAClD,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,aAAA,CAAA;AAAA,CAAA,EAAA,CAAA;;AAIH;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACO,SAASC,sBAAsB,CAAiDC,IAAW,EAAE;AAClG,EAAA,oBAAA,UAAA,KAAA,EAAA;AAAA,IAAA,SAAA,CAAA,wBAAA,EAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,MAAA,GAAA,YAAA,CAAA,wBAAA,CAAA,CAAA;AAAA,IAAA,SAAA,wBAAA,GAAA;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,wBAAA,CAAA,CAAA;AAAA,MAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,YAAA,CAAA,wBAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,OAAA;MAAA,KAEE,EAAA,SAAA,KAAA,CAAaH,MAAc,EAAQ;AAAA,QAAA,IAAA,KAAA,GAAA,IAAA,CAAA;AACjC,QAAA,IAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAYA,MAAM,CAAA,CAAA;AAElB,QAAA,IAAI,CAACA,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,+BAA+B,CAAC,EAAE,YAAM;UACpE,KAAI,CAACvC,OAAO,GAAG,KAAI,CAACkC,MAAM,CAACC,mBAAmB,EAAE,CAAA;AAClD,SAAC,CAAC,CAAA;AACJ,OAAA;AAAC,KAAA,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,wBAAA,CAAA;AAAA,GAAA,CAR2CE,IAAI,CAAA,CAAA;AAWpD;;ACrEA;AACA;AACA;AACA,IAAaG,SAAS,gBAAA,YAAA;AAAA,EAAA,SAAA,SAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,SAAA,EAAA,IAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA;AAEpB;AACF;AACA;;AAeE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,IAAA,SAAA,KAAA,CAAoBC,IAAY,EAAyB;MAAA,IAAvBC,OAAO,uEAAG,CAAC,CAAA;AAC3C,MAAA,OAAO,kBAAIC,CAAAA,KAAK,CAACF,IAAI,CAAC,CAACG,IAAI,EAAE,CAAEC,CAAAA,GAAG,CAAC,UAACC,KAAK,EAAA;QAAA,OAAKA,KAAK,GAAGJ,OAAO,CAAA;OAAC,CAAA,CAAA;AAChE,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;IAAA,KAgBA,EAAA,SAAA,QAAA,CAAuBd,IAAY,EAAEmB,KAAa,EAAEC,KAAa,EAAEC,MAAc,EAAEC,MAAc,EAAU;AACzG,MAAA,OAAO,CAACtB,IAAI,GAAGmB,KAAK,KAAKG,MAAM,GAAGD,MAAM,CAAC,IAAID,KAAK,GAAGD,KAAK,CAAC,GAAGE,MAAM,CAAA;AACtE,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,SAAA,CAAA;AAAA,CAAA,EAAA,CAAA;AAEF,eAnDYT,CAAAA,SAAS,EAKwB,oBAAA,EAAA,CAC1C,KAAK,EACL,QAAQ,EACR,SAAS,EACT,UAAU,EACV,YAAY,EACZ,UAAU,EACV,UAAU,EACV,UAAU,EACV,SAAS,EACT,eAAe,EACf,sBAAsB,CACvB,CAAA;;ACfH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAaW,QAAQ,gBAAA,UAAA,cAAA,EAAA;AAAA,EAAA,SAAA,CAAA,QAAA,EAAA,cAAA,CAAA,CAAA;AAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,QAAA,CAAA,CAAA;AAAA,EAAA,SAAA,QAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAAA,IAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA;AAEnB;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AACE,IAAA,SAAA,KAAA,CAAajB,MAAc,EAAQ;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;AACjC,MAAA,IAAA,CAAA,eAAA,CAAA,QAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAYA,MAAM,CAAA,CAAA;AAElB,MAAA,IAAI,CAACkB,eAAe,GAAG,IAAIC,eAAe,EAAE,CAAA;MAE5C,IAAI,CAACC,KAAK,EAAE,CAAA;MACZ,IAAI,CAACC,WAAW,EAAE,CAAA;MAClB,IAAI,CAACC,YAAY,EAAE,CAAA;MACnB,IAAI,CAAC/C,YAAY,EAAE,CAAA;;AAEnB;AACA;AACA,MAAA,IAAI,CAACyB,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,+BAA+B,CAAC,EAAE,YAAM;AACpE,QAAA,KAAI,CAACa,eAAe,CAACK,KAAK,EAAE,CAAA;AAE5B,QAAA,KAAI,CAACL,eAAe,GAAG,IAAIC,eAAe,EAAE,CAAA;QAE5C,KAAI,CAACK,IAAI,EAAE,CAAA;QACX,KAAI,CAACJ,KAAK,EAAE,CAAA;QACZ,KAAI,CAAC7C,YAAY,EAAE,CAAA;AACrB,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAGA,SAA8B,WAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC5B,MAAA,IAAI,CAACyB,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,aAAa,CAAC,EAAE,YAAM;QAClD,MAAI,CAACmB,IAAI,EAAE,CAAA;AACb,OAAC,CAAC,CAAA;AAEF,MAAA,IAAI,CAACxB,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,YAAY,CAAC,EAAE,YAAM;QACjD,MAAI,CAACe,KAAK,EAAE,CAAA;AACd,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAGA,SAA+B,YAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;MAC7B,IAAMK,kBAAkB,GAAGnB,SAAS,CAACmB,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAA;AAClE,MAAA,IAAMC,SAAS,GAAG,IAAI,CAAC3B,MAAM,CAAC4B,gBAAgB,EAAE,CAACC,gBAAgB,CAAcJ,kBAAkB,CAAC,CAAA;AAElGE,MAAAA,SAAS,CAACtE,OAAO,CAAC,UAACyE,OAAO,EAAK;AAC7BA,QAAAA,OAAO,CAACzC,gBAAgB,CAAC,SAAS,EAAE,YAAA;UAAA,OAAM,MAAI,CAACmC,IAAI,EAAE,CAAA;SAAC,CAAA,CAAA;AACtDM,QAAAA,OAAO,CAACzC,gBAAgB,CAAC,UAAU,EAAE,YAAA;UAAA,OAAM,MAAI,CAAC+B,KAAK,EAAE,CAAA;SAAC,CAAA,CAAA;AAC1D,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAMA,SAA+B,YAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC7B,MAAA,IAAI,CAAC,IAAI,CAACtD,OAAO,CAACS,YAAY,EAAE;AAC9B;AACA,QAAA,OAAA;AACF,OAAA;AAEA,MAAA,IAAMwD,aAAa,GAAG,IAAI,CAAC/B,MAAM,CAAC4B,gBAAgB,EAAE,CAAA;AAEpDG,MAAAA,aAAa,CAAC1C,gBAAgB,CAAC,YAAY,EAAE,YAAM;QACjD,MAAI,CAACmC,IAAI,EAAE,CAAA;AACb,OAAC,EAAE;AAAEQ,QAAAA,MAAM,EAAE,IAAI,CAACd,eAAe,CAACc,MAAAA;AAAO,OAAC,CAAC,CAAA;AAC3CD,MAAAA,aAAa,CAAC1C,gBAAgB,CAAC,YAAY,EAAE,YAAM;QACjD,MAAI,CAAC+B,KAAK,EAAE,CAAA;AACd,OAAC,EAAE;AAAEY,QAAAA,MAAM,EAAE,IAAI,CAACd,eAAe,CAACc,MAAAA;AAAO,OAAC,CAAC,CAAA;AAC7C,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAGA,SAAwB,KAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;MACtB,IAAoC,aAAA,GAAA,IAAI,CAAClE,OAAO;AAAxCC,QAAAA,QAAQ,iBAARA,QAAQ;AAAEC,QAAAA,aAAa,iBAAbA,aAAa,CAAA;;AAE/B;AACA,MAAA,IAAID,QAAQ,IAAIC,aAAa,GAAG,CAAC,EAAE;AACjC;QACA,IAAI,CAACwD,IAAI,EAAE,CAAA;;AAEX;AACA,QAAA,IAAI,CAACS,QAAQ,GAAGC,WAAW,CAAC,YAAM;UAChC,MAAI,CAAClC,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAA;AACnD,UAAA,MAAI,CAACK,MAAM,CAACmC,IAAI,EAAE,CAAA;UAClB,MAAI,CAACnC,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAA;SACnD,EAAE3B,aAAa,CAAC,CAAA;AACnB,OAAA;AACF,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAGA,SAAuB,IAAA,GAAA;AACrBoE,MAAAA,aAAa,CAAC,IAAI,CAACH,QAAQ,CAAC,CAAA;AAC9B,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,QAAA,CAAA;AAAA,CAAA,CA/G2BlC,aAAa,CAAA;;ACb3C;AACA;AACA;AACA,IAAasC,QAAQ,gBAAA,UAAA,cAAA,EAAA;AAAA,EAAA,SAAA,CAAA,QAAA,EAAA,cAAA,CAAA,CAAA;AAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,QAAA,CAAA,CAAA;AAAA,EAAA,SAAA,QAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAAA,IAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA;AAEnB;AACF;AACA;AACE,IAAA,SAAA,KAAA,CAAarC,MAAc,EAAQ;AACjC,MAAA,IAAA,CAAA,eAAA,CAAA,QAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAYA,MAAM,CAAA,CAAA;MAElB,IAAI,CAACsC,aAAa,EAAE,CAAA;AACtB,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAGA,SAAgC,aAAA,GAAA;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;AAC9B,MAAA,IAAMP,aAAa,GAAG,IAAI,CAAC/B,MAAM,CAAC4B,gBAAgB,EAAE,CAAA;AAEpD,MAAA,IAAMW,OAAO,GAAGR,aAAa,CAACS,aAAa,CAAC,iCAAiC,CAAC,CAAA;AAE9E,MAAA,IAAID,OAAO,EAAE;AACXA,QAAAA,OAAO,CAAClD,gBAAgB,CAAC,OAAO,EAAE,YAAA;AAAA,UAAA,OAAM,KAAI,CAACW,MAAM,CAACmC,IAAI,EAAE,CAAA;SAAC,CAAA,CAAA;AAC7D,OAAA;AAEA,MAAA,IAAMM,OAAO,GAAGV,aAAa,CAACS,aAAa,CAAC,gCAAgC,CAAC,CAAA;AAE7E,MAAA,IAAIC,OAAO,EAAE;AACXA,QAAAA,OAAO,CAACpD,gBAAgB,CAAC,OAAO,EAAE,YAAA;AAAA,UAAA,OAAM,KAAI,CAACW,MAAM,CAAC0C,QAAQ,EAAE,CAAA;SAAC,CAAA,CAAA;AACjE,OAAA;AACF,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,QAAA,CAAA;AAAA,CAAA,CA5B2B3C,aAAa,CAAA;;ACF3C;AACA;AACA;AACA,IAAa4C,SAAS,gBAAA,UAAA,cAAA,EAAA;AAAA,EAAA,SAAA,CAAA,SAAA,EAAA,cAAA,CAAA,CAAA;AAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,SAAA,CAAA,CAAA;AAAA,EAAA,SAAA,SAAA,GAAA;AAAA,IAAA,IAAA,KAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAKa,QAAQ,CAAA,CAAA;AAAA,IAAA,OAAA,KAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,SAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA;AAEzC;AACF;AACA;AACE,IAAA,SAAA,KAAA,CAAa3C,MAAc,EAAQ;AACjC,MAAA,IAAA,CAAA,eAAA,CAAA,SAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAYA,MAAM,CAAA,CAAA;MAElB,IAAI,CAAC4C,cAAc,EAAE,CAAA;MACrB,IAAI,CAACC,0BAA0B,EAAE,CAAA;MACjC,IAAI,CAACC,mBAAmB,EAAE,CAAA;MAC1B,IAAI,CAACC,qBAAqB,EAAE,CAAA;AAC9B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,sBAAA;IAAA,KAKA,EAAA,SAAA,oBAAA,CAA+BrD,IAAiB,EAAQ;MACtDA,IAAI,CAACsD,SAAS,CAACC,GAAG,CAAC,IAAI,CAACC,WAAW,CAAC,CAAA;AACtC,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,uBAAA;AAAA,IAAA,KAAA,EAGA,SAAwC,qBAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AACtC,MAAA,IAAI,CAAClD,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAC3B,YAAY,EACZ,YAAY,CACb,EAAE,YAAM;QACP,MAAI,CAACuC,cAAc,EAAE,CAAA;QACrB,MAAI,CAACC,0BAA0B,EAAE,CAAA;AACnC,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,mBAAA;AAAA,IAAA,KAAA,EAGA,SAAoC,iBAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;MAClC,IAAI,CAAC7C,MAAM,CAACmD,QAAQ,EAAE,CAAC9F,OAAO,CAAC,UAACqC,IAAI,EAAA;QAAA,OAAKA,IAAI,CAACsD,SAAS,CAACI,MAAM,CAAC,MAAI,CAACF,WAAW,CAAC,CAAA;OAAC,CAAA,CAAA;AACnF,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,4BAAA;AAAA,IAAA,KAAA,EAMA,SAA6C,0BAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC3C,MAAA,IAAQ5E,YAAY,GAAK,IAAI,CAACR,OAAO,CAA7BQ,YAAY,CAAA;AACpB,MAAA,IAAM+E,QAAQ,GAAG,IAAI,CAACrD,MAAM,CAACsD,WAAW,EAAE,CAAA;;AAE1C;AACA;MACA,IAAMC,YAAY,GAAGjD,SAAS,CAACkD,KAAK,CAAClF,YAAY,EAAE+E,QAAQ,CAAC,CAAA;AAE5D,MAAA,IAAI,CAACrD,MAAM,CAACmD,QAAQ,EAAE,CAAC9F,OAAO,CAAC,UAACqC,IAAI,EAAEkB,KAAK,EAAK;AAC9C,QAAA,IAAM6C,OAAO,GAAGF,YAAY,CAACG,QAAQ,CAAC9C,KAAK,CAAC,CAAA;;AAE5C;AACA;AACA,QAAA,IAAM+C,UAAU,GAAG,CAAC,CAACF,OAAO,EAAEG,QAAQ,EAAE,CAAA;AAExClE,QAAAA,IAAI,CAACmE,YAAY,CAAC,aAAa,EAAEF,UAAU,CAAC,CAAA;AAC5C,QAAA,MAAI,CAACG,WAAW,CAACpE,IAAI,EAAE+D,OAAO,CAAC,CAAA;;AAE/B;AACA,QAAA,IAAMM,cAAc,GAAGrE,IAAI,CAACmC,gBAAgB,CAACvB,SAAS,CAACmB,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;;AAErF;AACAqC,QAAAA,cAAc,CAAC1G,OAAO,CAAC,UAACyE,OAAoB,EAAK;AAC/C,UAAA,MAAI,CAACgC,WAAW,CAAChC,OAAO,EAAE2B,OAAO,CAAC,CAAA;AACpC,SAAC,CAAC,CAAA;AACJ,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EAMA,SAAiC,cAAA,GAAA;AAC/B,MAAA,IAAMO,eAAe,GAAG,IAAI,CAAChE,MAAM,CAACsD,WAAW,EAAE,CAAA;AAEjD,MAAA,IAAMW,UAAU,GAAG,IAAI,CAACjE,MAAM,CAACmD,QAAQ,EAAE,CAACzD,IAAI,CAACsE,eAAe,CAAC,CAAA;MAC/D,IAAI,CAACE,iBAAiB,EAAE,CAAA;AACxB,MAAA,IAAI,CAACC,oBAAoB,CAACF,UAAU,CAAC,CAAA;AACvC,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,qBAAA;AAAA,IAAA,KAAA,EAGA,SAAsC,mBAAA,GAAA;AACpC,MAAA,IAAI,CAACjE,MAAM,CAACmD,QAAQ,EAAE,CAAC9F,OAAO,CAAC,UAACqC,IAAI,EAAEkB,KAAK,EAAK;AAC9ClB,QAAAA,IAAI,CAACmE,YAAY,CAAC,wBAAwB,EAAE,CAACjD,KAAK,GAAG,CAAC,EAAEgD,QAAQ,EAAE,CAAC,CAAA;AACrE,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAMA,SAAsB9B,WAAAA,CAAAA,OAAoB,EAAE2B,OAAgB,EAAQ;MAClE,IAAI,CAACA,OAAO,EAAE;AACZ3B,QAAAA,OAAO,CAAC+B,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;AACxC,OAAC,MAAM;AACL/B,QAAAA,OAAO,CAACsC,eAAe,CAAC,UAAU,CAAC,CAAA;AACrC,OAAA;AACF,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,SAAA,CAAA;AAAA,CAAA,CArH4BrE,aAAa,CAAA;;ACJ5C;AACA;AACA;AACA,IAAasE,KAAK,gBAAA,UAAA,cAAA,EAAA;AAAA,EAAA,SAAA,CAAA,KAAA,EAAA,cAAA,CAAA,CAAA;AAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,KAAA,CAAA,CAAA;AAAA,EAAA,SAAA,KAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAAA,IAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,KAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA;AAEhB;AACF;AACA;AACE,IAAA,SAAA,KAAA,CAAarE,MAAc,EAAQ;AACjC,MAAA,IAAA,CAAA,eAAA,CAAA,KAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAYA,MAAM,CAAA,CAAA;MAElB,IAAI,CAACsE,YAAY,EAAE,CAAA;MACnB,IAAI,CAACC,aAAa,EAAE,CAAA;MACpB,IAAI,CAACC,0BAA0B,EAAE,CAAA;MACjC,IAAI,CAACC,mBAAmB,EAAE,CAAA;AAC5B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,qBAAA;AAAA,IAAA,KAAA,EAKA,SAAwC,mBAAA,GAAA;AACtC,MAAA,OAAO,IAAI,CAAC3G,OAAO,CAACO,GAAG,GAAG,CAAC,CAAA;AAC7B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EAKA,SAAmC,cAAA,GAAA;MACjC,IAAMqG,QAAQ,GAAG,IAAI,CAAC5G,OAAO,CAACG,OAAO,CAACC,KAAK,CAAA;AAC3C,MAAA,IAAMA,KAAK,GAAG,IAAI,CAAC8B,MAAM,CAAC4B,gBAAgB,EAAE,CAACY,aAAa,CAAKkC,GAAAA,CAAAA,MAAAA,CAAAA,QAAQ,CAAG,CAAA,CAAA;MAE1E,IAAkBxG,qBAAAA,GAAAA,KAAK,CAACyG,qBAAqB,EAAE;AAAvCC,QAAAA,KAAK,yBAALA,KAAK,CAAA;AAEb,MAAA,OAAOA,KAAK,CAAA;AACd,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAMA,SAA+B,YAAA,GAAA;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;AAC7B,MAAA,IAAQtG,YAAY,GAAK,IAAI,CAACR,OAAO,CAA7BQ,YAAY,CAAA;;AAEpB;AACA;MACA,IAAI,CAAC0B,MAAM,CAACsE,YAAY,CAAC,IAAI,CAACO,cAAc,EAAE,GAAGvG,YAAY,CAAC,CAAA;AAE9D,MAAA,IAAMwG,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,EAAE,CAAA;MAEnD,IAAI,CAAC/E,MAAM,CAACmD,QAAQ,EAAE,CAAC9F,OAAO,CAAC,UAACqC,IAAI,EAAK;AACvC;AACAA,QAAAA,IAAI,CAACsF,KAAK,CAACJ,KAAK,aAAM,KAAI,CAAC5E,MAAM,CAACiF,YAAY,EAAE,GAAGH,gBAAgB,GAAG,CAAC,EAAI,IAAA,CAAA,CAAA;;AAE3E;AACApF,QAAAA,IAAI,CAACsF,KAAK,CAACE,UAAU,GAAA,EAAA,CAAA,MAAA,CAAMJ,gBAAgB,EAAI,IAAA,CAAA,CAAA;AAC/CpF,QAAAA,IAAI,CAACsF,KAAK,CAACG,WAAW,GAAA,EAAA,CAAA,MAAA,CAAML,gBAAgB,EAAI,IAAA,CAAA,CAAA;AAClD,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,4BAAA;AAAA,IAAA,KAAA,EAGA,SAA6C,0BAAA,GAAA;AAC3C,MAAA,IAAQtG,eAAe,GAAK,IAAI,CAACV,OAAO,CAAhCU,eAAe,CAAA;MACvB,IAAI,CAACwB,MAAM,CAACoF,eAAe,EAAE,CAACJ,KAAK,CAACK,kBAAkB,GAAM7G,EAAAA,CAAAA,MAAAA,CAAAA,eAAe,EAAI,IAAA,CAAA,CAAA;AACjF,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AALE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAMA,SAAgC,aAAA,GAAA;AAC9B,MAAA,IAAM8G,UAAU,GAAG,IAAI,CAACtF,MAAM,CAACiF,YAAY,EAAE,GAAG,IAAI,CAACjF,MAAM,CAACmD,QAAQ,EAAE,CAACoC,MAAM,CAAA;MAE7E,IAAI,CAACvF,MAAM,CAACoF,eAAe,EAAE,CAACJ,KAAK,CAACJ,KAAK,GAAMU,EAAAA,CAAAA,MAAAA,CAAAA,UAAU,EAAI,IAAA,CAAA,CAAA;AAC/D,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,qBAAA;AAAA,IAAA,KAAA,EAGA,SAAsC,mBAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AACpC,MAAA,IAAI,CAACtF,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,+BAA+B,CAAC,EAAE,YAAM;QACpE,MAAI,CAACL,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAA;QACvD,MAAI,CAAC2E,YAAY,EAAE,CAAA;QACnB,MAAI,CAACC,aAAa,EAAE,CAAA;QACpB,MAAI,CAACC,0BAA0B,EAAE,CAAA;QACjC,MAAI,CAACxE,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAA;AACxD,OAAC,CAAC,CAAA;AACJ,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,KAAA,CAAA;AAAA,CAAA,CA7FwBI,aAAa,CAAA;;ACgBxC;AACA;AACA;AACA,IAAayF,IAAI,gBAAA,UAAA,cAAA,EAAA;AAAA,EAAA,SAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;AAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,IAAA,CAAA,CAAA;AAAA,EAAA,SAAA,IAAA,GAAA;AAAA,IAAA,IAAA,KAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;AAAA,IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAKoB,UAAU,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAKpB,CAAC,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAKkB,IAAI,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAKD,CAC7C,WAAW,EACX,WAAW,CACZ,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAKwB,KAAK,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAKL,CAAC,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAKsB,CAC9C,WAAW,EACX,YAAY,CACb,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,uBAAA,EAKiC,CAAC,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAKS,IAAI,CAAA,CAAA;IAAA,eAKD,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAAA,CAC7C,SAAS,EACT,YAAY,EACZ,UAAU,EACV,aAAa,CACd,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAK8B,EAAE,CAAA,CAAA;AAAA,IAAA,OAAA,KAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA;AAEjC;AACF;AACA;AACE,IAAA,SAAA,KAAA,CAAaxF,MAAc,EAAQ;AACjC,MAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAYA,MAAM,CAAA,CAAA;MAElB,IAAI,CAACyF,cAAc,EAAE,CAAA;MACrB,IAAI,CAACC,YAAY,EAAE,CAAA;MACnB,IAAI,CAACC,yBAAyB,EAAE,CAAA;MAChC,IAAI,CAACC,8BAA8B,EAAE,CAAA;AACvC,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAGA,SAAgC,aAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC9B;AACA;AACA;AACA,MAAA,IAAI,CAACC,cAAc,GAAG,IAAI1E,eAAe,EAAE,CAAA;AAE3C,MAAA,IAAI,CAAC2E,aAAa,CAACzI,OAAO,CAAC,UAAC0I,SAAS,EAAK;QACxC,MAAI,CAAC/F,MAAM,CAACoF,eAAe,EAAE,CAAC/F,gBAAgB,CAAC0G,SAAS,EAAE,UAACvI,KAAK,EAAA;AAAA,UAAA,OAAK,MAAI,CAACwI,IAAI,CAACxI,KAAK,CAAC,CAAA;SAAE,EAAA;AAAEwE,UAAAA,MAAM,EAAE,MAAI,CAAC6D,cAAc,CAAC7D,MAAAA;AAAO,SAAC,CAAC,CAAA;AAChI,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EAGA,SAAiC,cAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC/B,MAAA,IAAI,CAACiE,cAAc,CAAC5I,OAAO,CAAC,UAAC0I,SAAS,EAAK;QACzC,MAAI,CAAC/F,MAAM,CAACoF,eAAe,EAAE,CAAC/F,gBAAgB,CAAC0G,SAAS,EAAE,UAACvI,KAAK,EAAA;AAAA,UAAA,OAAK,MAAI,CAAC4D,KAAK,CAAC5D,KAAK,CAAC,CAAA;SAAC,CAAA,CAAA;AACzF,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAGA,SAAgC,aAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC9B;AACA;AACA;AACA,MAAA,IAAI,CAAC0I,cAAc,GAAG,IAAI/E,eAAe,EAAE,CAAA;AAE3C,MAAA,IAAI,CAACgF,aAAa,CAAC9I,OAAO,CAAC,UAAC0I,SAAS,EAAK;QACxC,MAAI,CAAC/F,MAAM,CAACoF,eAAe,EAAE,CAAC/F,gBAAgB,CAAC0G,SAAS,EAAE,YAAA;UAAA,OAAM,MAAI,CAACvE,IAAI,EAAE,CAAA;SAAE,EAAA;AAAEQ,UAAAA,MAAM,EAAE,MAAI,CAACkE,cAAc,CAAClE,MAAAA;AAAO,SAAC,CAAC,CAAA;AACtH,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AANE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;IAAA,KAOA,EAAA,SAAA,UAAA,CAAqBxE,KAAgB,EAAU;MAC7C,IAAIA,KAAK,YAAY4I,UAAU,EAAE;AAAA,QAAA,IAAA,qBAAA,CAAA;QAC/B,OAAO5I,CAAAA,qBAAAA,GAAAA,KAAK,CAAC6I,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAI,CAAC,CAAA;AACtC,OAAA;MAEA,OAAO9I,KAAK,CAAC8I,OAAO,CAAA;AACtB,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,iBAAA;IAAA,KAWA,EAAA,SAAA,eAAA,CAA0BC,YAAoB,EAAU;AACtD,MAAA,IAAIC,YAAY,GAAG,CAACC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,IAAI,CAACvG,MAAM,CAACiF,YAAY,EAAE,CAAC,CAAA;AAEzE,MAAA,IAAM0B,SAAS,GAAG,IAAI,CAAC3G,MAAM,CAAC4G,YAAY,EAAE,CAAA;;AAE5C;AACA;MACA,IAAIJ,YAAY,GAAGG,SAAS,EAAE;AAC5BH,QAAAA,YAAY,GAAG,CAAC,CAAA;AAClB,OAAA;;AAEA;AACA;MACA,IAAIA,YAAY,GAAG,CAAC,EAAE;AACpBA,QAAAA,YAAY,GAAGG,SAAS,CAAA;AAC1B,OAAA;AAEA,MAAA,OAAOH,YAAY,CAAA;AACrB,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;IAAA,KASA,EAAA,SAAA,WAAA,CAAsBK,SAAkB,EAAQ;AAC9C;AACA,MAAA,IAAMC,KAAK,GAAG,IAAI,CAAC9G,MAAM,CAACoF,eAAe,EAAE,CAACvD,gBAAgB,CAAC,GAAG,CAAC,CAAA;;AAEjE;AACA;AACA,MAAA,IAAI,IAAI,CAACkF,YAAY,KAAKF,SAAS,EAAE;AACnCC,QAAAA,KAAK,CAACzJ,OAAO,CAAC,UAAC2J,IAAI,EAAK;AACtB;AACA;AACA,UAAA,IAAMC,MAAM,GAAGJ,SAAS,GAAG,WAAW,GAAG,MAAM,CAAA;AAC/C,UAAA,IAAMK,WAAW,GAAGL,SAAS,GAAG,MAAM,GAAG,WAAW,CAAA;;AAEpD;UACAG,IAAI,CAACH,SAAS,GAAGA,SAAS,CAAA;UAE1BG,IAAI,CAACnD,YAAY,CAACqD,WAAW,EAAEF,IAAI,CAACG,YAAY,CAACF,MAAM,CAAC,CAAC,CAAA;AACzDD,UAAAA,IAAI,CAAC5C,eAAe,CAAC6C,MAAM,CAAC,CAAA;AAC9B,SAAC,CAAC,CAAA;;AAEF;AACA,QAAA,IAAI,CAACF,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY,CAAA;AACxC,OAAA;AACF,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;IAAA,KAcA,EAAA,SAAA,IAAA,CAAevJ,KAAgB,EAAQ;MACrC,IAAI,CAACwC,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAA;;AAEpD;AACA;AACA,MAAA,IAAMyH,oBAAoB,GAAG,IAAI,CAACC,UAAU,CAAC7J,KAAK,CAAC,GAAG,IAAI,CAACwC,MAAM,CAAC4B,gBAAgB,EAAE,CAAC0F,UAAU,CAAA;AAC/F,MAAA,IAAMC,QAAQ,GAAGH,oBAAoB,GAAG,IAAI,CAACI,qBAAqB,CAAA;;AAElE;MACA,IAAIf,IAAI,CAACgB,GAAG,CAACF,QAAQ,CAAC,GAAG,IAAI,CAACG,SAAS,EAAE;AACvC,QAAA,OAAA;AACF,OAAA;;AAEA;AACA;MACA,IAAMC,UAAU,GAAGrH,SAAS,CAACsH,QAAQ,CAACnB,IAAI,CAACgB,GAAG,CAACF,QAAQ,CAAC,EAAE,IAAI,CAACG,SAAS,EAAEG,MAAM,CAACC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAClG;AACA;MACA,IAAMvB,YAAY,GAAG,IAAI,CAACA,YAAY,GAAIgB,QAAQ,GAAGI,UAAW,CAAA;MAEhEnK,KAAK,CAACuK,cAAc,EAAE,CAAA;;AAEtB;MACA,IAAI,CAACvB,YAAY,GAAG,IAAI,CAACwB,eAAe,CAACzB,YAAY,CAAC,CAAA;AACtD;MACA,IAAI,CAACvG,MAAM,CAACoF,eAAe,EAAE,CAACJ,KAAK,CAACiD,SAAS,GAAkB1B,cAAAA,CAAAA,MAAAA,CAAAA,YAAY,EAAW,WAAA,CAAA,CAAA;MAEtF,IAAI,CAACvG,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAA;AACrD,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAGA,SAA+B,YAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC7B,MAAA,IAAI,CAACK,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,aAAa,CAAC,EAAE,YAAM;AAClD,QAAA,MAAI,CAACL,MAAM,CAACoF,eAAe,EAAE,CAACpC,SAAS,CAACC,GAAG,CAAC,MAAI,CAACiF,aAAa,CAAC,CAAA;AACjE,OAAC,CAAC,CAAA;AAEF,MAAA,IAAI,CAAClI,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,YAAY,CAAC,EAAE,YAAM;AACjD,QAAA,MAAI,CAACL,MAAM,CAACoF,eAAe,EAAE,CAACpC,SAAS,CAACI,MAAM,CAAC,MAAI,CAAC8E,aAAa,CAAC,CAAA;AACpE,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gCAAA;AAAA,IAAA,KAAA,EAGA,SAAiD,8BAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;AAC/C,MAAA,IAAI,CAAClI,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,kBAAkB,CAAC,EAAE,YAAM;AACvD,QAAA,MAAI,CAAC8H,WAAW,CAAC,KAAK,CAAC,CAAA;AACzB,OAAC,CAAC,CAAA;AAEF,MAAA,IAAI,CAACnI,MAAM,CAACI,WAAW,EAAE,CAACC,EAAE,CAAC,CAAC,YAAY,CAAC,EAAE,YAAM;AACjD;AACA+H,QAAAA,UAAU,CAAC,YAAM;AACf,UAAA,MAAI,CAACD,WAAW,CAAC,IAAI,CAAC,CAAA;AACxB,SAAC,EAAE,MAAI,CAACrK,OAAO,CAACU,eAAe,CAAC,CAAA;AAClC,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,2BAAA;AAAA,IAAA,KAAA,EAGA,SAA4C,yBAAA,GAAA;MAC1C,IAAI,CAACwB,MAAM,CAACmD,QAAQ,EAAE,CAAC9F,OAAO,CAAC,UAACqC,IAAI,EAAK;AACvCA,QAAAA,IAAI,CAACL,gBAAgB,CAAC,WAAW,EAAE,UAAC7B,KAAK,EAAA;UAAA,OAAKA,KAAK,CAACuK,cAAc,EAAE,CAAA;SAAC,CAAA,CAAA;AACvE,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,kBAAA;AAAA,IAAA,KAAA,EAGA,SAAmC,gBAAA,GAAA;AACjC,MAAA,IAAI,CAAClC,cAAc,CAACtE,KAAK,EAAE,CAAA;AAC7B,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,kBAAA;AAAA,IAAA,KAAA,EAGA,SAAmC,gBAAA,GAAA;AACjC,MAAA,IAAI,CAAC2E,cAAc,CAAC3E,KAAK,EAAE,CAAA;AAC7B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;IAAA,KASA,EAAA,SAAA,KAAA,CAAgB/D,KAAgB,EAAQ;MACtC,IAAI,CAACwC,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,CAAA;;AAE/C;AACA;AACA;AACA;MACA,IAAI,CAAC4G,YAAY,GAAG,CAACE,IAAI,CAACgB,GAAG,CAAC,IAAI,CAACzH,MAAM,CAACsD,WAAW,EAAE,GAAG,IAAI,CAACtD,MAAM,CAACiF,YAAY,EAAE,CAAC,CAAA;;AAErF;AACA;AACA;AACA,MAAA,IAAI,CAACuC,qBAAqB,GAAG,IAAI,CAACH,UAAU,CAAC7J,KAAK,CAAC,GAAG,IAAI,CAACwC,MAAM,CAAC4B,gBAAgB,EAAE,CAAC0F,UAAU,CAAA;MAE/F,IAAI,CAACe,aAAa,EAAE,CAAA;MACpB,IAAI,CAACC,aAAa,EAAE,CAAA;AACtB,KAAA;;AAEA;AACF;AACA;AAFE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAGA,SAAuB,IAAA,GAAA;MACrB,IAAI,CAACtI,MAAM,CAACuI,WAAW,CAAC,IAAI,CAAC/B,YAAY,CAAC,CAAA;MAC1C,IAAI,CAACxG,MAAM,CAACgG,IAAI,CAAC,IAAI,CAACQ,YAAY,CAAC,CAAA;MAEnC,IAAI,CAACgC,gBAAgB,EAAE,CAAA;MACvB,IAAI,CAACC,gBAAgB,EAAE,CAAA;MAEvB,IAAI,CAACzI,MAAM,CAACI,WAAW,EAAE,CAACT,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAA;AAChD,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,IAAA,CAAA;AAAA,CAAA,CA3UuBI,aAAa,CAAA;;AChBvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAQqB2I,MAAM,gBAAA,YAAA;AAEzB;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;EACE,SAAmBhE,MAAAA,CAAAA,QAAgB,EAAE5G,OAA0B,EAAE;AAAA,IAAA,IAAA,KAAA,GAAA,IAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AAC/D,IAAA,IAAI,CAACD,QAAQ,GAAG,IAAIZ,QAAQ,EAAE,CAAA;IAE9B,IAAI,CAACyH,QAAQ,GAAGA,QAAQ,CAAA;IACxB,IAAI,CAAC5G,OAAO,GAAG,IAAIF,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAEC,OAAO,CAAC,CAAA;AAElD,IAAA,IAAMyB,gBAAgB,GAAG,IAAI,CAACzB,OAAO,CAACmC,mBAAmB,EAAE,CAAA;AAE3D,IAAA,IAAI,CAAC0I,UAAU,GAAG,IAAI,CAACC,kBAAkB,EAAE,CAAA;IAE3C,IAAI,CAAC7G,aAAa,GAAG8G,QAAQ,CAACrG,aAAa,CAAC,IAAI,CAACkC,QAAQ,CAAC,CAAA;AAC1D,IAAA,IAAI,CAACoE,YAAY,GAAG,IAAI,CAAC/G,aAAa,CAACS,aAAa,CAAA,GAAA,CAAA,MAAA,CAAKjD,gBAAgB,CAACtB,OAAO,CAACG,KAAK,CAAG,CAAA,CAAA;AAC1F,IAAA,IAAI,CAACD,KAAK,GAAG,IAAI,CAAC4D,aAAa,CAACF,gBAAgB,CAAA,GAAA,CAAA,MAAA,CAAKtC,gBAAgB,CAACtB,OAAO,CAACE,KAAK,CAAG,CAAA,CAAA;IAEtF,IAAI,CAACkF,QAAQ,GAAG,CAAC,CAAA;;AAEjB;IACA,IAAI,CAACxF,QAAQ,CAACwC,EAAE,CAAC,CAAC,oBAAoB,CAAC,EAAE,YAAA;AAAA,MAAA,OAAM,KAAI,CAAC8B,IAAI,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA,CAAA;AAC9D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,EAAA,YAAA,CAAA,MAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,qBAAA;AAAA,IAAA,KAAA,EAKA,SAA+C,mBAAA,GAAA;AAC7C,MAAA,OAAO,IAAI,CAACrE,OAAO,CAACmC,mBAAmB,EAAE,CAAA;AAC3C,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAKA,SAA+B,WAAA,GAAA;MAC7B,OAAO,IAAI,CAACpC,QAAQ,CAAA;AACtB,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAKA,SAA8B,YAAA,GAAA;AAC5B,MAAA,OAAO,IAAI,CAACM,KAAK,CAACoH,MAAM,GAAG,CAAC,CAAA;AAC9B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAKA,SAA8B,YAAA,GAAA;MAC5B,OAAO,IAAI,CAACwD,SAAS,CAAA;AACvB,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAKA,SAA2C,QAAA,GAAA;MACzC,OAAO,IAAI,CAAC5K,KAAK,CAAA;AACnB,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAKA,SAA6B,WAAA,GAAA;MAC3B,OAAO,IAAI,CAACkF,QAAQ,CAAA;AACtB,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,kBAAA;AAAA,IAAA,KAAA,EAKA,SAAuC,gBAAA,GAAA;MACrC,OAAO,IAAI,CAACtB,aAAa,CAAA;AAC3B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,iBAAA;AAAA,IAAA,KAAA,EAKA,SAAsC,eAAA,GAAA;MACpC,OAAO,IAAI,CAAC+G,YAAY,CAAA;AAC1B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AANE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAOA,SAAoE,KAAA,GAAA;MAAA,IAAvDE,oBAA0C,uEAAG,EAAE,CAAA;AAAA,MAAA,IAAA,SAAA,GAAA,0BAAA,CAClC,IAAI,CAACL,UAAU,CAACM,MAAM,CAACD,oBAAoB,CAAC,CAAA;AAAA,QAAA,KAAA,CAAA;AAAA,MAAA,IAAA;QAApE,KAAsE,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,UAAA,IAA3DE,SAAS,GAAA,KAAA,CAAA,KAAA,CAAA;AAClBA,UAAAA,SAAS,CAACC,KAAK,CAAC,IAAI,CAAC,CAAA;AACvB,SAAA;AAAC,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,OAAA,SAAA;AAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,OAAA;AAED,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;IAAA,KAKA,EAAA,SAAA,IAAA,CAAYC,MAAc,EAAQ;MAChC,IAAMnB,SAAS,GAAG,CAAC,CAAC,IAAI,IAAI,CAAChD,YAAY,EAAE,GAAGmE,MAAM,CAAC,CAAA;MAErD,IAAI,CAACN,YAAY,CAAC9D,KAAK,CAACiD,SAAS,GAAA,cAAA,CAAA,MAAA,CAAkBA,SAAS,EAAe,eAAA,CAAA,CAAA;AAC7E,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAKA,SAA8B,IAAA,GAAA;MAAA,IAAlBmB,MAAM,uEAAG,CAAC,CAAA;MACpB,IAAI,CAACvL,QAAQ,CAAC8B,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,CAAA;AAEnC,MAAA,IAAI0D,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE,CAAA;MAEjCD,QAAQ,GAAGA,QAAQ,GAAG+F,MAAM,CAAA;AAE5B,MAAA,IAAI/F,QAAQ,GAAG,IAAI,CAACuD,YAAY,EAAE,EAAE;AAClCvD,QAAAA,QAAQ,GAAG,CAAC,CAAA;AACd,OAAA;AAEA,MAAA,IAAI,CAAC2C,IAAI,CAAC3C,QAAQ,CAAC,CAAA;AAEnB,MAAA,IAAI,CAACkF,WAAW,CAAClF,QAAQ,CAAC,CAAA;MAE1B,IAAI,CAACxF,QAAQ,CAAC8B,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAA;AACpC,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AANE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;IAAA,KAOA,EAAA,SAAA,GAAA,CAAWxC,KAAe,EAAQ;AAChC,MAAA,IAAI,CAACU,QAAQ,CAACwL,GAAG,CAAClM,KAAK,CAAC,CAAA;AAExB,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAPE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,IAAA;AAAA,IAAA,KAAA,EAQA,SAAUA,EAAAA,CAAAA,KAAe,EAAEM,QAA0B,EAAQ;MAC3D,IAAI,CAACI,QAAQ,CAACwC,EAAE,CAAClD,KAAK,EAAEM,QAAQ,CAAC,CAAA;AAEjC,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAKA,SAAkC,QAAA,GAAA;MAAA,IAAlB2L,MAAM,uEAAG,CAAC,CAAA;MACxB,IAAI,CAACvL,QAAQ,CAAC8B,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,CAAA;AAEnC,MAAA,IAAI0D,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE,CAAA;MAEjCD,QAAQ,GAAGA,QAAQ,GAAG+F,MAAM,CAAA;MAE5B,IAAI/F,QAAQ,GAAG,CAAC,EAAE;AAChBA,QAAAA,QAAQ,GAAG,IAAI,CAACuD,YAAY,EAAE,CAAA;AAChC,OAAA;AAEA,MAAA,IAAI,CAACZ,IAAI,CAAC3C,QAAQ,CAAC,CAAA;AAEnB,MAAA,IAAI,CAACkF,WAAW,CAAClF,QAAQ,CAAC,CAAA;MAE1B,IAAI,CAACxF,QAAQ,CAAC8B,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAA;AACpC,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;IAAA,KAKA,EAAA,SAAA,YAAA,CAAoBoJ,SAAiB,EAAQ;MAC3C,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAA;AAC5B,KAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;IAAA,KASA,EAAA,SAAA,WAAA,CAAmB1F,QAAgB,EAAQ;AACzC,MAAA,IAAIiG,MAAM,CAACC,KAAK,CAAClG,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,IAAIA,QAAQ,GAAG,IAAI,CAACuD,YAAY,EAAE,EAAE;AAC5E,QAAA,MAAM,IAAI4C,UAAU,CAAsBnG,oBAAAA,CAAAA,MAAAA,CAAAA,QAAQ,CAAG,CAAA,CAAA;AACvD,OAAA;MAEA,IAAI,CAACA,QAAQ,GAAGoD,IAAI,CAACgD,KAAK,CAACpG,QAAQ,CAAC,CAAA;AACtC,KAAA;;AAEA;AACF;AACA;AACA;AACA;AAJE,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,oBAAA;AAAA,IAAA,KAAA,EAKA,SAAqD,kBAAA,GAAA;MACnD,OAAO,CACLV,SAAS,EACTzC,sBAAsB,CAACmE,KAAK,CAAC,EAC7BnE,sBAAsB,CAACe,QAAQ,CAAC,EAChCoB,QAAQ,EACRnC,sBAAsB,CAACsF,IAAI,CAAC,CAC7B,CAAC7E,GAAG,CAAC,UAAC+I,SAAS,EAAA;QAAA,OAAK,IAAIA,SAAS,EAAE,CAAA;OAAC,CAAA,CAAA;AACvC,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,MAAA,CAAA;AAAA,CAAA;;;;"}