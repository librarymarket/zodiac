{"version":3,"file":"zodiac.min.js","sources":["../src/events/eventBus.ts","../src/options.ts","../src/components/componentBase.ts","../src/utilities.ts","../src/components/autoplay.ts","../src/components/controls.ts","../src/components/itemState.ts","../src/components/liveRegion.ts","../src/components/track.ts","../src/components/drag.ts","../src/zodiac.ts"],"sourcesContent":["/**\n * Defines a zodiac slider event.\n */\nexport interface EventInterface {\n  /**\n   * The callback function for the event.\n   */\n  callback: CallableFunction;\n\n  /**\n   * The name of the event.\n   */\n  name: string;\n}\n\n/**\n * Provides an event bus for tracking slider related events.\n */\nexport class EventBus {\n\n  /**\n   * A list of subscribed events.\n   */\n  protected events: EventInterface[];\n\n  constructor() {\n    this.events = [];\n  }\n\n  /**\n   * Emits events by name with arguments for the callback function.\n   *\n   * @param names - The event names to emit.\n   * @param args - Arguments for the callback function.\n   */\n  public emit(names: string[], ...args: unknown[]): void {\n    names.forEach((name) => {\n      this.filterByName(name).forEach((event) => {\n        event.callback(...args);\n      });\n    });\n  }\n\n  /**\n   * Unsubscribes event(s) by name(s).\n   *\n   * @param names - A list of event names to unsubscribe.\n   */\n  public off(names: string[]): void {\n    for (const name of names) {\n      this.events = this.events.filter((event) => event.name !== name);\n    }\n  }\n\n  /**\n   * Subscribes an event with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   */\n  public on(names: string[], callback: CallableFunction): void {\n    names.forEach((name) => this.events.push({name, callback}));\n  }\n\n  /**\n   * Filter events by name.\n   *\n   * @param name - The name to filter by.\n   *\n   * @returns The result event set.\n   */\n  protected filterByName(name: string): EventInterface[] {\n    return this.events.filter((event) => event.name === name);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\n\n/**\n * A collection of classes used by the slider to identify specific elements.\n *\n * These classes cannot be set in the media query options.\n */\nexport interface ClassesInterface {\n\n  /**\n   * The class used for the inner slider container.\n   */\n  inner?: string;\n\n  /**\n   * The class used by the slider items.\n   */\n  items?: string;\n\n  /**\n   * The class for the track slider div surrounding the items.\n   */\n  track?: string;\n\n}\n\n/**\n * A collection of options used to configure the slider.\n */\nexport interface OptionsInterface {\n\n  /**\n   * Whether or not the slider should autoplay.\n   */\n  autoplay?: boolean;\n\n  /**\n   * The delay before the carousel will transition.\n   */\n  autoplaySpeed?: number;\n\n  /**\n   * A collection of classes used by the slider to identify specific elements.\n   *\n   * These classes cannot be set in the media query options.\n   */\n  classes?: ClassesInterface;\n\n  /**\n   * Enables the live region element.\n   */\n  enableLiveRegion?: boolean;\n\n  /**\n   * The gap between slides.\n   */\n  gap?: number;\n\n  /**\n   * The total number of items to display per view.\n   */\n  itemsPerView?: number;\n\n  /**\n   * A template that is used for the live region's text.\n   *\n   * The following patterns will be replaced programmatically:\n   * - `@position` - The position of the active slider item.\n   * - `@total` - The total number of slider items\n   * - `@title` - The title of the slider item. The title is derived from the\n   *   `data-zodiac-live-region-title` attribute within an item.\n   */\n  liveRegionText?: string;\n\n  /**\n   * The media queries configured with options.\n   */\n  mediaQueryLists?: {\n\n    [key: string]: MediaQueryList;\n\n  };\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  mediaQueryOptions?: MediaQueryOptionsInterface;\n\n  /**\n   * Whether or not autoplay should pause on hover.\n   */\n  pauseOnHover?: boolean;\n\n  /**\n   * The speed at which slides will transition.\n   */\n  transitionSpeed?: number;\n\n}\n\n/**\n * A collection of options applied at the specific media query.\n */\nexport interface MediaQueryOptionsInterface {\n\n  [key: string]: OptionsInterface;\n\n}\n\n/**\n * The media queries configured with options.\n */\nexport interface MediaQueryListsInterface {\n\n  /**\n   * The `MediaQueryList` for the supplied options.\n   */\n  mediaQueryList: MediaQueryList;\n\n  /**\n   * The options for the provided `MediaQueryList`.\n   */\n  options: OptionsInterface;\n}\n\n/**\n * An object used to configure the slider.\n */\nexport class Options {\n\n  /**\n   * The base options unrestricted by any media query.\n   */\n  protected baseOptions: OptionsInterface = {\n    autoplay: true,\n    autoplaySpeed: 5000,\n    classes: {\n      inner: 'zodiac-inner',\n      items: 'zodiac-item',\n      track: 'zodiac-track',\n    },\n    enableLiveRegion: true,\n    gap: 8,\n    itemsPerView: 5,\n    liveRegionText: 'Slide @position of @total @title',\n    pauseOnHover: true,\n    transitionSpeed: 500,\n  };\n\n  /**\n   * The active options based on the computed media queries.\n   */\n  protected effectiveOptions: OptionsInterface;\n\n  /**\n   * The event bus.\n   *\n   * The event bus is used to notify when a media query has changed.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The media queries configured with options.\n   */\n  protected mediaQueryLists: MediaQueryListsInterface[] = [];\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  protected mediaQueryOptions: MediaQueryOptionsInterface = {};\n\n  /**\n   * Constructs a slider option set.\n   *\n   * A default set of options is used if no user options are provided.\n   *\n   * @throws {@link TypeError}\n   * Throws an error if any `classes` options are found in the\n   * `mediaQueryOptions`.\n   *\n   * @param eventBus - The event bus.\n   * @param options - The user supplied options.\n   */\n  public constructor(eventBus: EventBus, options: OptionsInterface = {}) {\n    this.eventBus = eventBus;\n\n    // Override the default base options with those provided by the user.\n    Object.assign(this.baseOptions, options);\n\n    // Check if any media query options were provided.\n    if (options.mediaQueryOptions) {\n      const mediaQueryOptions = options.mediaQueryOptions;\n\n      for (const [mediaQuery, mediaQueryOptionSet] of Object.entries(mediaQueryOptions)) {\n        if (mediaQueryOptionSet) {\n          const mediaQueryList = matchMedia(mediaQuery);\n\n          if (this.hasClasses(mediaQueryOptionSet.classes)) {\n            throw new TypeError('The classes property can only be set once.');\n          }\n\n          this.mediaQueryLists.push({\n            mediaQueryList,\n            options: mediaQueryOptionSet,\n          });\n\n          mediaQueryList.addEventListener('change', () => {\n            this.rebuildEffectiveOptions();\n          });\n        }\n      }\n    }\n\n    this.rebuildEffectiveOptions();\n  }\n\n  /**\n   * Gets the effective options.\n   *\n   * @returns The effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.effectiveOptions;\n  }\n\n  /**\n   * Checks if a `ClassesInterface` has any properties set.\n   *\n   * @param classes - The `ClassesInterface` to evaulate.\n   *\n   * @returns True if the interface has any properties otherwise false.\n   */\n  protected hasClasses(classes: ClassesInterface): boolean {\n    return classes && Object.values(classes).some((item) => item);\n  }\n\n  /**\n   * Rebuilds the effective options.\n   *\n   * If there are any matching media query options, they will override the base\n   * options.\n   */\n  protected rebuildEffectiveOptions() {\n    this.eventBus.emit(['rebuildEffectiveOptions.before']);\n\n    const effectiveOptions = Object.assign({}, this.baseOptions);\n\n    for (const list of this.mediaQueryLists) {\n      if (list.mediaQueryList.matches) {\n        Object.assign(effectiveOptions, list.options);\n      }\n    }\n\n    this.effectiveOptions = Object.freeze(effectiveOptions);\n\n    this.eventBus.emit(['rebuildEffectiveOptions.after']);\n  }\n\n}\n","import { OptionsInterface } from '../options';\n\nimport Zodiac from '../zodiac';\n\n/**\n * Defines the structure of a component.\n *\n * Components in Zodiac are used to compartmentalize specific areas of concern\n * within the slider. Functionality that is common between all components is\n * placed in the base `Zodiac` instance.\n */\nexport interface ComponentInterface {\n\n  /**\n   * Mounts the component to the slider.\n   */\n  mount(zodiac: Zodiac): void;\n\n}\n\n/**\n * A base implementation of ComponentInterface.\n * @api\n */\nexport abstract class ComponentBase implements ComponentInterface {\n\n  /**\n   * The slider's options.\n   */\n  protected options: OptionsInterface;\n\n  /**\n   * The slider instance.\n   */\n  protected zodiac: Zodiac;\n\n  /**\n   * {@inheritDoc ComponentInterface.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    this.zodiac = zodiac;\n    this.options = this.zodiac.getEffectiveOptions();\n  }\n\n}\n\n// The constructor for the `UpdateEffectiveOptions` mixin. The `any` type is\n// required for the mixin's constructor.\n// @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype UpdateEffectiveOptionsContructor = new (...args: any[]) => ComponentBase;\n\n/**\n * A mixin that rebuilds the options when they are changed.\n *\n * @returns A mixin that rebuilds the effective options.\n */\nexport function UpdateEffectiveOptions<TBase extends UpdateEffectiveOptionsContructor>(Base: TBase) {\n  return class UpdatingEffectiveOptions extends Base {\n\n    public mount(zodiac: Zodiac): void {\n      super.mount(zodiac);\n\n      this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n        this.zodiac.getEventBus().emit(['updateEffectiveOptions.before']);\n        this.options = this.zodiac.getEffectiveOptions();\n        this.zodiac.getEventBus().emit(['updateEffectiveOptions.after']);\n      });\n    }\n\n  };\n}\n","/**\n * A collection of static helper methods.\n */\nexport class Utilities {\n\n  /**\n   * CSS selectors for focusable elements.\n   */\n  public static readonly focusableSelectors = [\n    '* a',\n    '* area',\n    '* input',\n    '* select',\n    '* textarea',\n    '* button',\n    '* iframe',\n    '* object',\n    '* embed',\n    '* *[tabindex]',\n    '* *[contenteditable]',\n  ];\n\n  /**\n   * Generates an array of numbers starting at a given position.\n   *\n   * @param size - The size of the array to generate.\n   * @param startAt - The position to start at.\n   *\n   * @returns The generated array.\n   */\n  public static range(size: number, startAt = 0): number[] {\n    return [...Array(size).keys()].map((index) => index + startAt);\n  }\n\n  /**\n   * Maps a number in an input range to a number in an output range.\n   *\n   * This method takes an input number that exists with a specific range, and\n   * outputs a number scaled to an output range.\n   *\n   * @see {@link https://math.stackexchange.com/questions/377169/going-from-a-value-inside-1-1-to-a-value-in-another-range}\n   *\n   * @param item - The original number within the input range.\n   * @param inMin - The minimum number in the input range.\n   * @param inMax - The maximum number in the input range.\n   * @param outMin - The minimum number in the output range.\n   * @param outMax - The maximum number in the output range.\n   *\n   * @returns The new number within the output range.\n   */\n  public static rangeMap(item: number, inMin: number, inMax: number, outMin: number, outMax: number): number {\n    return (item - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Adds autoplay capabilities to the slider.\n *\n * When mounted, this component will have the following possible side effects:\n * - Auto-rotation will be started (if configured correctly)\n * - Auto-rotation will be paused when the slider is being dragged\n * - Auto-rotation will be paused when a focusable element is focused\n * - Auto-rotation will be conditionally paused when hovering over the slider\n *\n * @see Utilities.focusableSelectors\n *   For a description of what qualifies as a \"focusable\" element.\n */\nexport class Autoplay extends ComponentBase {\n\n  /**\n   * The autoplay interval ID.\n   */\n  protected interval: NodeJS.Timeout;\n\n  /**\n   * An `AbortController` for resetting the mouse events in `this.pauseOnHover()`.\n   */\n  protected abortController: AbortController;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.abortController = new AbortController();\n\n    this.start();\n    this.pauseOnDrag();\n    this.pauseOnFocus();\n    this.pauseOnHover();\n\n    // Reconfigure autoplay and pause on hover configuration when the options\n    // are rebuilt.\n    this.zodiac.getEventBus().on(['updateEffectiveOptions.after'], () => {\n      this.abortController.abort();\n\n      this.abortController = new AbortController();\n\n      this.stop();\n      this.start();\n      this.pauseOnHover();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when the slider is being dragged.\n   */\n  protected pauseOnDrag(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.stop();\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.start();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when any focusable element is focused.\n   */\n  protected pauseOnFocus(): void {\n    const focusableSelectors = Utilities.focusableSelectors.join(', ');\n    const focusable = this.zodiac.getSliderElement().querySelectorAll<HTMLElement>(focusableSelectors);\n\n    focusable.forEach((element) => {\n      element.addEventListener('focusin', () => this.stop());\n      element.addEventListener('focusout', () => this.start());\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation on hover (if applicable).\n   *\n   * If `pauseOnHover` is true, the slider's auto-rotation will be stopped when\n   * the user's cursor enters the slider element, then resumed when it leaves.\n   */\n  protected pauseOnHover(): void {\n    if (!this.options.pauseOnHover) {\n      // This is a no-op method if pause on hover is not enabled.\n      return;\n    }\n\n    const sliderElement = this.zodiac.getSliderElement();\n\n    sliderElement.addEventListener('mouseenter', () => {\n      this.stop();\n    }, { signal: this.abortController.signal });\n    sliderElement.addEventListener('mouseleave', () => {\n      this.start();\n    }, { signal: this.abortController.signal });\n  }\n\n  /**\n   * Auto-rotates the slider using the configured interval.\n   */\n  protected start(): void {\n    const { autoplay, autoplaySpeed } = this.options;\n\n    // Check if autoplay is enabled with a positive interval duration.\n    if (autoplay && autoplaySpeed > 0) {\n      // Prevent multiple autoplay intervals from occurring simultaneously.\n      this.stop();\n\n      // Create an interval to continuously switch to the next item on a delay.\n      this.interval = setInterval(() => {\n        this.zodiac.getEventBus().emit(['autoplay.before']);\n        this.zodiac.next();\n        this.zodiac.getEventBus().emit(['autoplay.after']);\n      }, autoplaySpeed);\n    }\n  }\n\n  /**\n   * Stops the slider's auto-rotation (if applicable).\n   */\n  protected stop(): void {\n    clearInterval(this.interval);\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Adds UI control capabilities to the slider.\n */\nexport class Controls extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setUpControls();\n  }\n\n  /**\n   * Attaches navigation buttons to the next & previous slider controls.\n   */\n  protected setUpControls(): void {\n    const sliderElement = this.zodiac.getSliderElement();\n\n    const nextBtn = sliderElement.querySelector('[data-zodiac-direction=\"right\"]');\n\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => this.zodiac.next());\n    }\n\n    const prevBtn = sliderElement.querySelector('[data-zodiac-direction=\"left\"]');\n\n    if (prevBtn) {\n      prevBtn.addEventListener('click', () => this.zodiac.previous());\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Keeps the state of each item updated.\n */\nexport class ItemState extends ComponentBase {\n\n  /**\n   * The class that indicates an item is active.\n   */\n  protected readonly activeClass = 'active';\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setActiveClass();\n    this.setAccessibilityAttributes();\n    this.setInitialItemState();\n    this.adjustItemStateOnMove();\n  }\n\n  /**\n   * Adds the active class to an item.\n   *\n   * @param item - The element to apply the active class to.\n   */\n  protected addActiveClassToItem(item: HTMLElement): void {\n    item.classList.add(this.activeClass);\n  }\n\n  /**\n   * Adjusts each item's state by listening to slider events.\n   */\n  protected adjustItemStateOnMove(): void {\n    this.zodiac.getEventBus().on([\n      'move.after',\n      'drag.after',\n    ], () => {\n      this.setActiveClass();\n      this.setAccessibilityAttributes();\n    });\n  }\n\n  /**\n   * Removes the active class from each item in the slider.\n   */\n  protected removeActiveClass(): void {\n    this.zodiac.getItems().forEach((item) => item.classList.remove(this.activeClass));\n  }\n\n  /**\n   * Applies the appropriate attributes for accessibility to each item.\n   *\n   * Items that aren't currently visible will be set as hidden (using\n   * `aria-hidden`) and have a negative tab index applied to them.\n   */\n  protected setAccessibilityAttributes(): void {\n    const { itemsPerView } = this.options;\n    const position = this.zodiac.getPosition();\n\n    // Compute a range of visible slide positions based on the the number of\n    // items per view and the current position.\n    const visibleRange = Utilities.range(itemsPerView, position);\n\n    this.zodiac.getItems().forEach((item, index) => {\n      const visible = visibleRange.includes(index);\n\n      // This value must be converted to a string since `setAttribute()`\n      // expects `value` to be a string.\n      const ariaHidden = (!visible).toString();\n\n      item.setAttribute('aria-hidden', ariaHidden);\n      this.setTabindex(item, visible);\n\n      // Collect a list of focusable items within each slider item.\n      const focusableItems = item.querySelectorAll(Utilities.focusableSelectors.join(', '));\n\n      // Set the tab index for each focusable element within each slider item.\n      focusableItems.forEach((element: HTMLElement) => {\n        this.setTabindex(element, visible);\n      });\n    });\n  }\n\n  /**\n   * Sets the active class on the active item and removes it from the rest.\n   *\n   * There can only be one active item at a time. The active item is tracked by\n   * `Zodiac.getPosition()`.\n   */\n  protected setActiveClass(): void {\n    const currentPosition = this.zodiac.getPosition();\n\n    const activeItem = this.zodiac.getItems().item(currentPosition);\n    this.removeActiveClass();\n    this.addActiveClassToItem(activeItem);\n  }\n\n  /**\n   * Applies an indexing attribute to each item.\n   */\n  protected setInitialItemState(): void {\n    this.zodiac.getItems().forEach((item, index) => {\n      item.setAttribute('data-zodiac-item-index', (index + 1).toString());\n    });\n  }\n\n  /**\n   * Sets the tabindex of an element based on whether it is visible.\n   *\n   * @param element - The element to modify.\n   * @param visible - Whether or not the element is active.\n   */\n  protected setTabindex(element: HTMLElement, visible: boolean): void {\n    if (!visible) {\n      element.setAttribute('tabindex', '-1');\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Adds a live region, so the slide position can be announced to screen readers.\n */\nexport class LiveRegion extends ComponentBase {\n\n  /**\n   * The live region element.\n   */\n  protected liveRegion: HTMLDivElement;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    if (this.options.enableLiveRegion) {\n      this.createLiveRegion();\n      this.updateLiveRegion();\n    }\n  }\n\n  /**\n   * Creates and adds the live region element to the slider.\n   */\n  protected createLiveRegion() {\n    this.liveRegion = document.createElement('div');\n    this.liveRegion.setAttribute('aria-live', 'polite');\n    this.liveRegion.setAttribute('aria-atomic', 'true');\n    this.liveRegion.classList.add('zodiac-live-region');\n\n    this.zodiac.getSliderElement().appendChild(this.liveRegion);\n  }\n\n  protected getLiveRegionTitle() {\n    const activeItem = this.zodiac.getSliderElement().querySelector<HTMLElement>('.zodiac-item.active');\n\n    let title = '';\n\n    if (activeItem.dataset.zodiacLiveRegionTitle) {\n      title = activeItem.dataset.zodiacLiveRegionTitle;\n    } else {\n      const element = activeItem.querySelector<HTMLElement>('[data-zodiac-live-region-title]');\n\n      if (element) {\n        title = element.dataset.zodiacLiveRegionTitle;\n      }\n    }\n\n    return title;\n  }\n\n  /**\n   * Updates the text of the live region when the slider is moved.\n   */\n  protected updateLiveRegion() {\n    this.zodiac.getEventBus().on(['move.after', 'drag.after'], () => {\n      const position = this.zodiac.getPosition() + 1;\n      const total = this.zodiac.getItemTotal() + 1;\n      const title = this.getLiveRegionTitle();\n\n      this.liveRegion.innerText = this.options.liveRegionText\n        .replace('@position', position.toString())\n        .replace('@total', total.toString())\n        .replace('@title', title)\n        .trim();\n    });\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Manipulates the width of the slider track and each slider item.\n */\nexport class Track extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setItemWidth();\n    this.setTrackWidth();\n    this.setTrackTransitionDuration();\n    this.updateTrackOnResize();\n  }\n\n  /**\n   * Gets the margin size for slider items by dividing the gap option in half.\n   *\n   * @returns The gap option value divided in half.\n   */\n  protected getSliderItemMargin(): number {\n    return this.options.gap / 2;\n  }\n\n  /**\n   * Retrieves the width of the slider's inner element.\n   *\n   * @returns The width of the slider.\n   */\n  protected getSliderWidth(): number {\n    const selector = this.options.classes.inner;\n    const inner = this.zodiac.getSliderElement().querySelector(`.${selector}`);\n\n    const { width } = inner.getBoundingClientRect();\n\n    return width;\n  }\n\n  /**\n   * Sets the width and margin of each slider item.\n   *\n   * Each slider item's width is calculated by dividing the slider's width by\n   * configured total items per view minus the configured gap setting.\n   */\n  protected setItemWidth(): void {\n    const { itemsPerView } = this.options;\n\n    // Calculate the width of each slider item by dividing the total size of\n    // the inner slider by the total items per view.\n    this.zodiac.setItemWidth(this.getSliderWidth() / itemsPerView);\n\n    const sliderItemMargin = this.getSliderItemMargin();\n\n    this.zodiac.getItems().forEach((item) => {\n      // Apply the width to the slide item.\n      item.style.width = `${this.zodiac.getItemWidth() - sliderItemMargin * 2}px`;\n\n      // Add spacing between each slider item with left and right margin.\n      item.style.marginLeft = `${sliderItemMargin}px`;\n      item.style.marginRight = `${sliderItemMargin}px`;\n    });\n  }\n\n  /**\n   * Applies the transition speed setting to the track.\n   */\n  protected setTrackTransitionDuration(): void {\n    const { transitionSpeed } = this.options;\n    this.zodiac.getTrackElement().style.transitionDuration = `${transitionSpeed}ms`;\n  }\n\n  /**\n   * Set the width of the track element.\n   *\n   * The width of track element is equal to the width of the slider multiplied\n   * by the total number of items.\n   */\n  protected setTrackWidth(): void {\n    const trackWidth = this.zodiac.getItemWidth() * this.zodiac.getItems().length;\n\n    this.zodiac.getTrackElement().style.width = `${trackWidth}px`;\n  }\n\n  /**\n   * Update the track and item width when the window is resized.\n   */\n  protected updateTrackOnResize(): void {\n    this.zodiac.getEventBus().on(['updateEffectiveOptions.after'], () => {\n      this.zodiac.getEventBus().emit(['trackUpdated.before']);\n      this.setItemWidth();\n      this.setTrackWidth();\n      this.setTrackTransitionDuration();\n      this.zodiac.getEventBus().emit(['trackUpdated.after']);\n    });\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\ntype DragEvent = MouseEvent | TouchEvent;\n\n/**\n * A map of events that will represent dragging.\n */\ninterface DragEventMap {\n  'mousedown': DragEvent,\n  'mousemove': DragEvent,\n  'mouseleave': DragEvent,\n  'mouseup': DragEvent,\n  'touchcancel': DragEvent,\n  'touchend': DragEvent,\n  'touchmove': DragEvent,\n  'touchstart': DragEvent,\n}\n\ntype EventKey = keyof DragEventMap;\n\n/**\n * Adds dragging capabilities to the slider (for both mouse & touch inputs).\n */\nexport class Drag extends ComponentBase {\n\n  /**\n   * The class used to indicate that the slider is being dragged.\n   */\n  protected readonly draggingClass = 'dragging';\n\n  /**\n   * The value used to track and apply the `translate` CSS while dragging.\n   */\n  protected dragPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.move()` method.\n   */\n  protected moveController: AbortController = null;\n\n  /**\n   * Events that move the slider when dragging.\n   */\n  protected readonly moveEventKeys: EventKey[] = [\n    'mousemove',\n    'touchmove',\n  ];\n\n  /**\n   * A flag used to determine whether the clicking of links is disallowed.\n   */\n  protected preventClick = false;\n\n  /**\n   * The position that will be given to `Zodiac` after the dragging has stopped.\n   */\n  protected snapPosition = 0;\n\n  /**\n   * Events that signal when dragging should begin.\n   */\n  protected readonly startEventKeys: EventKey[] = [\n    'mousedown',\n    'touchstart',\n  ];\n\n  /**\n   * The position of the event dispatcher at the start of the dragging process.\n   */\n  protected startingEventPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.stop()` method.\n   */\n  protected stopController: AbortController = null;\n\n  /**\n   * Events that signal when dragging should end.\n   */\n  protected readonly stopEventKeys: EventKey[] = [\n    'mouseup',\n    'mouseleave',\n    'touchend',\n    'touchcancel',\n  ];\n\n  /**\n   * How far the slider must be dragged before moving begins.\n   */\n  protected readonly threshold = 20;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.addStartEvents();\n    this.onDragEvents();\n    this.preventDefaultOnDragStart();\n    this.preventDefaultClickOnDragStart();\n  }\n\n  /**\n   * Applies the move events to the slider.\n   */\n  protected addMoveEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.moveController = new AbortController();\n\n    this.moveEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.move(event), { signal: this.moveController.signal });\n    });\n  }\n\n  /**\n   * Applies the start events to the slider.\n   */\n  protected addStartEvents(): void {\n    this.startEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.start(event));\n    });\n  }\n\n  /**\n   * Applies the stop events to the slider.\n   */\n  protected addStopEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.stopController = new AbortController();\n\n    this.stopEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, () => this.stop(), { signal: this.stopController.signal });\n    });\n  }\n\n  /**\n   * Retrieves the `screenX` value from an event depending on the event type.\n   *\n   * @param event - The event in which to derive the `screenX` value.\n   *\n   * @returns The `screenX` value of the event.\n   */\n  protected getScreenX(event: DragEvent): number {\n    if (event instanceof TouchEvent) {\n      return event.touches[0].screenX ?? 0;\n    }\n\n    return event.screenX;\n  }\n\n  /**\n   * Snaps a drag position into a valid `Zodiac` position.\n   *\n   * The `Drag` component tracks the drag position with a pixel value to\n   * animate dragging. This method snaps a drag position into valid `Zodiac`\n   * position to set the active slide.\n   *\n   * @param dragPosition - The position in pixels.\n   *\n   * @returns The position as a numeric index.\n   */\n  protected getSnapPosition(dragPosition: number): number {\n    let snapPosition = -Math.round(dragPosition / this.zodiac.getItemWidth());\n\n    const itemTotal = this.zodiac.getItemTotal();\n\n    // If the calculated position is greater than the total number of slider\n    // items then restart at the beginning.\n    if (snapPosition > itemTotal) {\n      snapPosition = 0;\n    }\n\n    // If the calculated position is less than zero then move to the end of\n    // the slider.\n    if (snapPosition < 0) {\n      snapPosition = itemTotal;\n    }\n\n    return snapPosition;\n  }\n\n  /**\n   * Mark all links within the slider track as draggable or un-draggable.\n   *\n   * Depending on the value of `draggable`, links within the slider track will\n   * be enabled or disabled by swapping between storing the link in an `href`\n   * or `data-href` attribute and toggling the `draggable` attribute.\n   *\n   * @param draggable - Whether to mark the items as draggable or un-draggable.\n   */\n  protected modifyLinks(draggable: boolean): void {\n    // Retrieve all links within the track element.\n    const links = this.zodiac.getTrackElement().querySelectorAll('a');\n\n    // Prevent unnecessary modification by checking if the draggable value\n    // matches the prevent click state.\n    if (this.preventClick === draggable) {\n      links.forEach((link) => {\n        // Determine the source and destination of the attribute modification\n        // based on the whether draggability is being enabled or disabled.\n        const source = draggable ? 'data-href' : 'href';\n        const destination = draggable ? 'href' : 'data-href';\n\n        // Add or remove the draggable attribute on the link element.\n        link.draggable = draggable;\n\n        link.setAttribute(destination, link.getAttribute(source));\n        link.removeAttribute(source);\n      });\n\n      // Indicate click has or hasn't been prevented.\n      this.preventClick = !this.preventClick;\n    }\n  }\n\n  /**\n   * Calculates & updates the position of the slider track on drag.\n   *\n   * During the move stage of the dragging, this method has the following side\n   * effects:\n   * - Calculates the dragging distance based on where the user clicked or\n   *   touched.\n   * - Determines how fast the slider should be dragged based on how close to\n   *   the edge the mouse cursor is moved.\n   * - Computes which slide to snap to after dragging is complete.\n   * - Animates the slider track while dragging.\n   *\n   * @param event - The DOM event emitted during the drag movement.\n   */\n  protected move(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.move.before']);\n\n    // Determine the distance between the position of current event dispatcher\n    // the starting event dispatcher position.\n    const currentEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n    const distance = currentEventPosition - this.startingEventPosition;\n\n    // Exit this method if the distance is less than the drag threshold.\n    if (Math.abs(distance) < this.threshold) {\n      return;\n    }\n\n    // Increase the acceleration speed based on how far the user has dragged\n    // the slider.\n    const accelerate = Utilities.rangeMap(Math.abs(distance), this.threshold, window.innerWidth, 1, 3);\n    // Determine by drag position by adding distance multiplied by the\n    // acceleration speed.\n    const dragPosition = this.dragPosition + (distance * accelerate);\n\n    event.preventDefault();\n\n    // Get the snap position from the current drag position.\n    this.snapPosition = this.getSnapPosition(dragPosition);\n    // Animate the dragging.\n    this.zodiac.getTrackElement().style.transform = `translate3d(${dragPosition}px, 0, 0)`;\n\n    this.zodiac.getEventBus().emit(['drag.move.after']);\n  }\n\n  /**\n   * Adds the `dragging` class to the slider track while it is being dragged.\n   */\n  protected onDragEvents(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.zodiac.getTrackElement().classList.add(this.draggingClass);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.zodiac.getTrackElement().classList.remove(this.draggingClass);\n    });\n  }\n\n  /**\n   * Prevent link clicking when the slider is being dragged.\n   */\n  protected preventDefaultClickOnDragStart(): void {\n    this.zodiac.getEventBus().on(['drag.move.before'], () => {\n      this.modifyLinks(false);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      // Wait for the slider to finishing animating before enabling the links.\n      setTimeout(() => {\n        this.modifyLinks(true);\n      }, this.options.transitionSpeed);\n    });\n  }\n\n  /**\n   * Prevents unnecessary dragging for slider items.\n   */\n  protected preventDefaultOnDragStart(): void {\n    this.zodiac.getItems().forEach((item) => {\n      item.addEventListener('dragstart', (event) => event.preventDefault());\n    });\n  }\n\n  /**\n   * Removes the move events from the slider to prevent unnecessary calculations.\n   */\n  protected removeMoveEvents(): void {\n    this.moveController.abort();\n  }\n\n  /**\n   * Removes the stop events from the slider to prevent unnecessary calculations.\n   */\n  protected removeStopEvents(): void {\n    this.stopController.abort();\n  }\n\n  /**\n   * Prepares the slider to be dragged when dragging has started.\n   *\n   * The slider is prepared by calculating the current drag position, relative\n   * to the `Zodiac`'s current position, and the position of the event\n   * dispatcher.\n   *\n   * @param event - The DOM event which fired this method.\n   */\n  protected start(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.before']);\n\n    // Calculate the drag position by multiplying the slider's current position\n    // by the width of a single slide. The value of this calculation is\n    // converted to a negative number to animate the slider since it will\n    // eventually be passed into `translate3d`.\n    this.dragPosition = -Math.abs(this.zodiac.getPosition() * this.zodiac.getItemWidth());\n\n    this.snapPosition = this.getSnapPosition(this.dragPosition);\n\n    // Determine the position of the event dispatcher by subtracting the event\n    // dispatcher's position on the screen by the slider's offset of it's\n    // parent element.\n    this.startingEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n\n    this.addMoveEvents();\n    this.addStopEvents();\n  }\n\n  /**\n   * Positions the slider after the dragging is complete.\n   */\n  protected stop(): void {\n    this.zodiac.setPosition(this.snapPosition);\n    this.zodiac.move(this.snapPosition);\n\n    this.removeMoveEvents();\n    this.removeStopEvents();\n\n    this.zodiac.getEventBus().emit(['drag.after']);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\nimport { Options, OptionsInterface } from './options';\n\nimport { ComponentInterface, UpdateEffectiveOptions } from './components/componentBase';\nimport { Autoplay } from './components/autoplay';\nimport { Controls } from './components/controls';\nimport { ItemState } from './components/itemState';\nimport { LiveRegion } from './components/liveRegion';\nimport { Track } from './components/track';\nimport { Drag } from './components/drag';\n\n/**\n * The entry point for the Zodiac Slider.\n *\n * This class contains all properties and methods shared between each component.\n *\n * Components are mounted in `Zodiac.mount()`. This function iterates over each\n * component, invoking their `mount()` method & supplying itself as an argument.\n */\nexport default class Zodiac {\n\n  /**\n   * The slider components.\n   */\n  protected components: ComponentInterface[];\n\n  /**\n   * The event bus.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The slider items.\n   */\n  protected items: NodeListOf<HTMLElement>;\n\n  /**\n   * The width of each slider item.\n   */\n  protected itemWidth: number;\n\n  /**\n   * The slider options.\n   */\n  protected options: Options;\n\n  /**\n   * The slider's current position in the item sequence (zero-indexed).\n   */\n  protected position: number;\n\n  /**\n   * The CSS selector for identifying the slider.\n   */\n  protected selector: string;\n\n  /**\n   * The element on which the slider has been initialized.\n   */\n  protected readonly sliderElement: HTMLElement;\n\n  /**\n   * The slider track element.\n   */\n  protected readonly trackElement: HTMLElement;\n\n  /**\n   * Constructs a `Zodiac` instance based on the provided selector and options.\n   *\n   * @param selector - The base selector to use.\n   * @param options - The options to initialize the slider with.\n   */\n  public constructor(selector: string, options?: OptionsInterface) {\n    this.eventBus = new EventBus();\n\n    this.selector = selector;\n    this.options = new Options(this.eventBus, options);\n\n    const effectiveOptions = this.options.getEffectiveOptions();\n\n    this.components = this.registerComponents();\n\n    this.sliderElement = document.querySelector(this.selector);\n    this.trackElement = this.sliderElement.querySelector(`.${effectiveOptions.classes.track}`);\n    this.items = this.sliderElement.querySelectorAll(`.${effectiveOptions.classes.items}`);\n\n    this.position = 0;\n\n    // Reposition the slider items on media query change.\n    this.eventBus.on(['trackUpdated.after'], () => this.next(0));\n  }\n\n  /**\n   * Retrieves the slider's effective options.\n   *\n   * @returns The slider's effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.options.getEffectiveOptions();\n  }\n\n  /**\n   * Retrieves the event bus.\n   *\n   * @returns The event bus.\n   */\n  public getEventBus(): EventBus {\n    return this.eventBus;\n  }\n\n  /**\n   * Retrieves the total number of items.\n   *\n   * @returns The total number of items offset by 1.\n   */\n  public getItemTotal(): number {\n    return this.items.length - 1;\n  }\n\n  /**\n   * Retrieves the width of a slider item.\n   *\n   * @returns The width of individual slider items.\n   */\n  public getItemWidth(): number {\n    return this.itemWidth;\n  }\n\n  /**\n   * Retrieves the slider's items.\n   *\n   * @returns The slider's items.\n   */\n  public getItems(): NodeListOf<HTMLElement> {\n    return this.items;\n  }\n\n  /**\n   * Retrieves the slider's position.\n   *\n   * @returns The position of the slider.\n   */\n  public getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Retrieves the slider element.\n   *\n   * @returns The slider element.\n   */\n  public getSliderElement(): HTMLElement {\n    return this.sliderElement;\n  }\n\n  /**\n   * Retrieves the track element.\n   *\n   * @returns The track element.\n   */\n  public getTrackElement(): HTMLElement {\n    return this.trackElement;\n  }\n\n  /**\n   * Mounts the sliders components.\n   *\n   * @param thirdPartyComponents - A list of user defined components.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public mount(thirdPartyComponents: ComponentInterface[] = []): this {\n    for (const component of this.components.concat(thirdPartyComponents)) {\n      component.mount(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the slider based on the provided offset.\n   *\n   * @param offset - The position to move the slider.\n   */\n  public move(offset: number): void {\n    const transform = -1 * (this.getItemWidth() * offset);\n\n    this.trackElement.style.transform = `translate3d(${transform}px, 0px, 0px)`;\n  }\n\n  /**\n   * Move to the next slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public next(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position + offset;\n\n    if (position > this.getItemTotal()) {\n      position = 0;\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Removes a custom event listener.\n   *\n   * @param names - A list of event names to unsubscribe.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public off(names: string[]): this {\n    this.eventBus.off(names);\n\n    return this;\n  }\n\n  /**\n   * Adds a custom event listener with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public on(names: string[], callback: CallableFunction): this {\n    this.eventBus.on(names, callback);\n\n    return this;\n  }\n\n  /**\n   * Move to the previous slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public previous(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position - offset;\n\n    if (position < 0) {\n      position = this.getItemTotal();\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Sets the width of individual slider items.\n   *\n   * @param itemWidth - The new item width.\n   */\n  public setItemWidth(itemWidth: number): void {\n    this.itemWidth = itemWidth;\n  }\n\n  /**\n   * Sets the sliders position.\n   *\n   * @throws {@link RangeError}\n   * Will throw an error if the position is `Nan`, less than zero, or greater\n   * than the total number of items.\n   *\n   * @param position - The position to set.\n   */\n  public setPosition(position: number): void {\n    if (Number.isNaN(position) || position < 0 || position > this.getItemTotal()) {\n      throw new RangeError(`Invalid position: ${position}`);\n    }\n\n    this.position = Math.trunc(position);\n  }\n\n  /**\n   * Registers the required components provided by Zodiac.\n   *\n   * @returns A list of instantiated components.\n   */\n  protected registerComponents(): ComponentInterface[] {\n    return [\n      ItemState,\n      UpdateEffectiveOptions(Track),\n      UpdateEffectiveOptions(Autoplay),\n      Controls,\n      UpdateEffectiveOptions(Drag),\n      LiveRegion,\n    ].map((Component) => new Component());\n  }\n\n}\n"],"names":["EventBus","_classCallCheck","this","events","_createClass","key","value","names","_this","_len","arguments","length","args","Array","_key","forEach","name","filterByName","event","callback","apply","_step","_this2","_iterator","_createForOfIteratorHelper","_loop","filter","s","n","done","err","e","f","_this3","push","Options","eventBus","options","undefined","_defineProperty","autoplay","autoplaySpeed","classes","inner","items","track","enableLiveRegion","gap","itemsPerView","liveRegionText","pauseOnHover","transitionSpeed","Object","assign","baseOptions","mediaQueryOptions","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","mediaQuery","mediaQueryOptionSet","mediaQueryList","matchMedia","hasClasses","TypeError","mediaQueryLists","addEventListener","rebuildEffectiveOptions","effectiveOptions","values","some","item","emit","list","matches","freeze","ComponentBase","zodiac","getEffectiveOptions","UpdateEffectiveOptions","Base","_Base","_inherits","UpdatingEffectiveOptions","_super","_createSuper","_get","_getPrototypeOf","prototype","call","getEventBus","on","Utilities","size","startAt","_toConsumableArray","keys","map","index","inMin","inMax","outMin","outMax","Autoplay","_ComponentBase","abortController","AbortController","start","pauseOnDrag","pauseOnFocus","abort","stop","focusableSelectors","join","getSliderElement","querySelectorAll","element","_this4","sliderElement","signal","_this5","_this$options","interval","setInterval","next","clearInterval","Controls","setUpControls","nextBtn","querySelector","prevBtn","previous","ItemState","_assertThisInitialized","concat","setActiveClass","setAccessibilityAttributes","setInitialItemState","adjustItemStateOnMove","classList","add","activeClass","getItems","remove","position","getPosition","visibleRange","range","visible","includes","ariaHidden","toString","setAttribute","setTabindex","currentPosition","activeItem","removeActiveClass","addActiveClassToItem","removeAttribute","LiveRegion","createLiveRegion","updateLiveRegion","liveRegion","document","createElement","appendChild","title","dataset","zodiacLiveRegionTitle","total","getItemTotal","getLiveRegionTitle","innerText","replace","trim","Track","setItemWidth","setTrackWidth","setTrackTransitionDuration","updateTrackOnResize","selector","getBoundingClientRect","width","getSliderWidth","sliderItemMargin","getSliderItemMargin","style","getItemWidth","marginLeft","marginRight","getTrackElement","transitionDuration","trackWidth","Drag","addStartEvents","onDragEvents","preventDefaultOnDragStart","preventDefaultClickOnDragStart","moveController","moveEventKeys","eventType","move","startEventKeys","stopController","stopEventKeys","_event$touches$0$scre","TouchEvent","touches","screenX","dragPosition","snapPosition","Math","round","itemTotal","draggable","links","preventClick","link","source","destination","getAttribute","distance","getScreenX","offsetLeft","startingEventPosition","abs","threshold","accelerate","rangeMap","window","innerWidth","preventDefault","getSnapPosition","transform","draggingClass","_this6","modifyLinks","setTimeout","addMoveEvents","addStopEvents","setPosition","removeMoveEvents","removeStopEvents","Zodiac","components","registerComponents","trackElement","itemWidth","thirdPartyComponents","mount","offset","off","Number","isNaN","RangeError","trunc","Component"],"mappings":"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"}