{"version":3,"file":"zodiac.min.js","sources":["../src/events/eventBus.ts","../src/options.ts","../src/components/componentBase.ts","../src/utilities.ts","../src/components/autoplay.ts","../src/components/controls.ts","../src/components/itemState.ts","../src/components/track.ts","../src/components/drag.ts","../src/zodiac.ts"],"sourcesContent":["/**\n * Defines a zodiac slider event.\n */\nexport interface EventInterface {\n  /**\n   * The callback function for the event.\n   */\n  callback: CallableFunction;\n\n  /**\n   * The name of the event.\n   */\n  name: string;\n}\n\n/**\n * Provides an event bus for tracking slider related events.\n */\nexport class EventBus {\n\n  /**\n   * A list of subscribed events.\n   */\n  protected events: EventInterface[];\n\n  constructor() {\n    this.events = [];\n  }\n\n  /**\n   * Emits events by name with arguments for the callback function.\n   *\n   * @param names - The event names to emit.\n   * @param args - Arguments for the callback function.\n   */\n  public emit(names: string[], ...args: unknown[]): void {\n    names.forEach((name) => {\n      this.filterByName(name).forEach((event) => {\n        event.callback(...args);\n      });\n    });\n  }\n\n  /**\n   * Unsubscribes event(s) by name(s).\n   *\n   * @param names - A list of event names to unsubscribe.\n   */\n  public off(names: string[]): void {\n    for (const name of names) {\n      this.events = this.events.filter((event) => event.name !== name);\n    }\n  }\n\n  /**\n   * Subscribes an event with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   */\n  public on(names: string[], callback: CallableFunction): void {\n    names.forEach((name) => this.events.push({name, callback}));\n  }\n\n  /**\n   * Filter events by name.\n   *\n   * @param name - The name to filter by.\n   *\n   * @returns The result event set.\n   */\n  protected filterByName(name: string): EventInterface[] {\n    return this.events.filter((event) => event.name === name);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\n\n/**\n * A collection of classes used by the slider to identify specific elements.\n *\n * These classes cannot be set in the media query options.\n */\nexport interface ClassesInterface {\n\n  /**\n   * The class used for the inner slider container.\n   */\n  inner?: string;\n\n  /**\n   * The class used by the slider items.\n   */\n  items?: string;\n\n  /**\n   * The class for the track slider div surrounding the items.\n   */\n  track?: string;\n\n}\n\n/**\n * A collection of options used to configure the slider.\n */\nexport interface OptionsInterface {\n\n  /**\n   * Whether or not the slider should autoplay.\n   */\n  autoplay?: boolean;\n\n  /**\n   * The delay before the carousel will transition.\n   */\n  autoplaySpeed?: number;\n\n  /**\n   * A collection of classes used by the slider to identify specific elements.\n   *\n   * These classes cannot be set in the media query options.\n   */\n  classes?: ClassesInterface;\n\n  /**\n   * The gap between slides.\n   */\n  gap?: number;\n\n  /**\n   * The total number of items to display per view.\n   */\n  itemsPerView?: number;\n\n  /**\n   * The media queries configured with options.\n   */\n  mediaQueryLists?: {\n\n    [key: string]: MediaQueryList;\n\n  };\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  mediaQueryOptions?: MediaQueryOptionsInterface;\n\n  /**\n   * Whether or not autoplay should pause on hover.\n   */\n  pauseOnHover?: boolean;\n\n  /**\n   * The speed at which slides will transition.\n   */\n  transitionSpeed?: number;\n\n}\n\n/**\n * A collection of options applied at the specific media query.\n */\nexport interface MediaQueryOptionsInterface {\n\n  [key: string]: OptionsInterface;\n\n}\n\n/**\n * The media queries configured with options.\n */\nexport interface MediaQueryListsInterface {\n\n  /**\n   * The `MediaQueryList` for the supplied options.\n   */\n  mediaQueryList: MediaQueryList;\n\n  /**\n   * The options for the provided `MediaQueryList`.\n   */\n  options: OptionsInterface;\n}\n\n/**\n * An object used to configure the slider.\n */\nexport class Options {\n\n  /**\n   * The base options unrestricted by any media query.\n   */\n  protected baseOptions: OptionsInterface = {\n    autoplay: true,\n    autoplaySpeed: 5000,\n    classes: {\n      inner: 'zodiac-inner',\n      items: 'zodiac-item',\n      track: 'zodiac-track',\n    },\n    gap: 8,\n    itemsPerView: 5,\n    pauseOnHover: true,\n    transitionSpeed: 500,\n  };\n\n  /**\n   * The active options based on the computed media queries.\n   */\n  protected effectiveOptions: OptionsInterface;\n\n  /**\n   * The event bus.\n   *\n   * The event bus is used to notify when a media query has changed.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The media queries configured with options.\n   */\n  protected mediaQueryLists: MediaQueryListsInterface[] = [];\n\n  /**\n   * A collection of options applied at the specific media query.\n   */\n  protected mediaQueryOptions: MediaQueryOptionsInterface = {};\n\n  /**\n   * Constructs a slider option set.\n   *\n   * A default set of options is used if no user options are provided.\n   *\n   * @throws {@link TypeError}\n   * Throws an error if any `classes` options are found in the\n   * `mediaQueryOptions`.\n   *\n   * @param eventBus - The event bus.\n   * @param options - The user supplied options.\n   */\n  public constructor(eventBus: EventBus, options: OptionsInterface = {}) {\n    this.eventBus = eventBus;\n\n    // Override the default base options with those provided by the user.\n    Object.assign(this.baseOptions, options);\n\n    // Check if any media query options were provided.\n    if (options.mediaQueryOptions) {\n      const mediaQueryOptions = options.mediaQueryOptions;\n\n      for (const [mediaQuery, mediaQueryOptionSet] of Object.entries(mediaQueryOptions)) {\n        if (mediaQueryOptionSet) {\n          const mediaQueryList = matchMedia(mediaQuery);\n\n          if (this.hasClasses(mediaQueryOptionSet.classes)) {\n            throw new TypeError('The classes property can only be set once.');\n          }\n\n          this.mediaQueryLists.push({\n            mediaQueryList,\n            options: mediaQueryOptionSet,\n          });\n\n          mediaQueryList.addEventListener('change', () => {\n            this.rebuildEffectiveOptions();\n          });\n        }\n      }\n    }\n\n    this.rebuildEffectiveOptions();\n  }\n\n  /**\n   * Gets the effective options.\n   *\n   * @returns The effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.effectiveOptions;\n  }\n\n  /**\n   * Checks if a `ClassesInterface` has any properties set.\n   *\n   * @param classes - The `ClassesInterface` to evaulate.\n   *\n   * @returns True if the interface has any properties otherwise false.\n   */\n  protected hasClasses(classes: ClassesInterface): boolean {\n    return classes && Object.values(classes).some((item) => item);\n  }\n\n  /**\n   * Rebuilds the effective options.\n   *\n   * If there are any matching media query options, they will override the base\n   * options.\n   */\n  protected rebuildEffectiveOptions() {\n    this.eventBus.emit(['rebuildEffectiveOptions.before']);\n\n    const effectiveOptions = Object.assign({}, this.baseOptions);\n\n    for (const list of this.mediaQueryLists) {\n      if (list.mediaQueryList.matches) {\n        Object.assign(effectiveOptions, list.options);\n      }\n    }\n\n    this.effectiveOptions = Object.freeze(effectiveOptions);\n\n    this.eventBus.emit(['rebuildEffectiveOptions.after']);\n  }\n\n}\n","import { OptionsInterface } from '../options';\n\nimport Zodiac from '../zodiac';\n\n/**\n * Defines the structure of a component.\n *\n * Components in Zodiac are used to compartmentalize specific areas of concern\n * within the slider. Functionality that is common between all components is\n * placed in the base `Zodiac` instance.\n */\nexport interface ComponentInterface {\n\n  /**\n   * Mounts the component to the slider.\n   */\n  mount(zodiac: Zodiac): void;\n\n}\n\n/**\n * A base implementation of ComponentInterface.\n * @api\n */\nexport abstract class ComponentBase implements ComponentInterface {\n\n  /**\n   * The slider's options.\n   */\n  protected options: OptionsInterface;\n\n  /**\n   * The slider instance.\n   */\n  protected zodiac: Zodiac;\n\n  /**\n   * {@inheritDoc ComponentInterface.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    this.zodiac = zodiac;\n    this.options = this.zodiac.getEffectiveOptions();\n  }\n\n}\n\n// The constructor for the `UpdateEffectiveOptions` mixin. The `any` type is\n// required for the mixin's constructor.\n// @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype UpdateEffectiveOptionsContructor = new (...args: any[]) => ComponentBase;\n\n/**\n * A mixin that rebuilds the options when they are changed.\n *\n * @returns A mixin that rebuilds the effective options.\n */\nexport function UpdateEffectiveOptions<TBase extends UpdateEffectiveOptionsContructor>(Base: TBase) {\n  return class UpdatingEffectiveOptions extends Base {\n\n    public mount(zodiac: Zodiac): void {\n      super.mount(zodiac);\n\n      this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n        this.options = this.zodiac.getEffectiveOptions();\n      });\n    }\n\n  };\n}\n","/**\n * A collection of static helper methods.\n */\nexport class Utilities {\n\n  /**\n   * CSS selectors for focusable elements.\n   */\n  public static readonly focusableSelectors = [\n    '* a',\n    '* area',\n    '* input',\n    '* select',\n    '* textarea',\n    '* button',\n    '* iframe',\n    '* object',\n    '* embed',\n    '* *[tabindex]',\n    '* *[contenteditable]',\n  ];\n\n  /**\n   * Generates an array of numbers starting at a given position.\n   *\n   * @param size - The size of the array to generate.\n   * @param startAt - The position to start at.\n   *\n   * @returns The generated array.\n   */\n  public static range(size: number, startAt = 0): number[] {\n    return [...Array(size).keys()].map((index) => index + startAt);\n  }\n\n  /**\n   * Maps a number in an input range to a number in an output range.\n   *\n   * This method takes an input number that exists with a specific range, and\n   * outputs a number scaled to an output range.\n   *\n   * @see {@link https://math.stackexchange.com/questions/377169/going-from-a-value-inside-1-1-to-a-value-in-another-range}\n   *\n   * @param item - The original number within the input range.\n   * @param inMin - The minimum number in the input range.\n   * @param inMax - The maximum number in the input range.\n   * @param outMin - The minimum number in the output range.\n   * @param outMax - The maximum number in the output range.\n   *\n   * @returns The new number within the output range.\n   */\n  public static rangeMap(item: number, inMin: number, inMax: number, outMin: number, outMax: number): number {\n    return (item - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Adds autoplay capabilities to the slider.\n *\n * When mounted, this component will have the following possible side effects:\n * - Auto-rotation will be started (if configured correctly)\n * - Auto-rotation will be paused when the slider is being dragged\n * - Auto-rotation will be paused when a focusable element is focused\n * - Auto-rotation will be conditionally paused when hovering over the slider\n *\n * @see Utilities.focusableSelectors\n *   For a description of what qualifies as a \"focusable\" element.\n */\nexport class Autoplay extends ComponentBase {\n\n  /**\n   * The autoplay interval ID.\n   */\n  protected interval: NodeJS.Timeout;\n\n  /**\n   * An `AbortController` for resetting the mouse events in `this.pauseOnHover()`.\n   */\n  protected abortController: AbortController;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.abortController = new AbortController();\n\n    this.start();\n    this.pauseOnDrag();\n    this.pauseOnFocus();\n    this.pauseOnHover();\n\n    // Reconfigure autoplay and pause on hover configuration when the options\n    // are rebuilt.\n    this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n      this.abortController.abort();\n\n      this.abortController = new AbortController();\n\n      this.stop();\n      this.start();\n      this.pauseOnHover();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when the slider is being dragged.\n   */\n  protected pauseOnDrag(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.stop();\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.start();\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation when any focusable element is focused.\n   */\n  protected pauseOnFocus(): void {\n    const focusableSelectors = Utilities.focusableSelectors.join(', ');\n    const focusable = this.zodiac.getSliderElement().querySelectorAll<HTMLElement>(focusableSelectors);\n\n    focusable.forEach((element) => {\n      element.addEventListener('focusin', () => this.stop());\n      element.addEventListener('focusout', () => this.start());\n    });\n  }\n\n  /**\n   * Pauses the slider's auto-rotation on hover (if applicable).\n   *\n   * If `pauseOnHover` is true, the slider's auto-rotation will be stopped when\n   * the user's cursor enters the slider element, then resumed when it leaves.\n   */\n  protected pauseOnHover(): void {\n    if (!this.options.pauseOnHover) {\n      // This is a no-op method if pause on hover is not enabled.\n      return;\n    }\n\n    const sliderElement = this.zodiac.getSliderElement();\n\n    sliderElement.addEventListener('mouseenter', () => {\n      this.stop();\n    }, { signal: this.abortController.signal });\n    sliderElement.addEventListener('mouseleave', () => {\n      this.start();\n    }, { signal: this.abortController.signal });\n  }\n\n  /**\n   * Auto-rotates the slider using the configured interval.\n   */\n  protected start(): void {\n    const { autoplay, autoplaySpeed } = this.options;\n\n    // Check if autoplay is enabled with a positive interval duration.\n    if (autoplay && autoplaySpeed > 0) {\n      // Prevent multiple autoplay intervals from occurring simultaneously.\n      this.stop();\n\n      // Create an interval to continuously switch to the next item on a delay.\n      this.interval = setInterval(() => {\n        this.zodiac.getEventBus().emit(['autoplay.before']);\n        this.zodiac.next();\n        this.zodiac.getEventBus().emit(['autoplay.after']);\n      }, autoplaySpeed);\n    }\n  }\n\n  /**\n   * Stops the slider's auto-rotation (if applicable).\n   */\n  protected stop(): void {\n    clearInterval(this.interval);\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Adds UI control capabilities to the slider.\n */\nexport class Controls extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setUpControls();\n  }\n\n  /**\n   * Attaches navigation buttons to the next & previous slider controls.\n   */\n  protected setUpControls(): void {\n    const sliderElement = this.zodiac.getSliderElement();\n\n    const nextBtn = sliderElement.querySelector('[data-zodiac-direction=\"right\"]');\n\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => this.zodiac.next());\n    }\n\n    const prevBtn = sliderElement.querySelector('[data-zodiac-direction=\"left\"]');\n\n    if (prevBtn) {\n      prevBtn.addEventListener('click', () => this.zodiac.previous());\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\n/**\n * Keeps the state of each item updated.\n */\nexport class ItemState extends ComponentBase {\n\n  /**\n   * The class that indicates an item is active.\n   */\n  protected readonly activeClass = 'active';\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setActiveClass();\n    this.setAccessibilityAttributes();\n    this.setInitialItemState();\n    this.adjustItemStateOnMove();\n  }\n\n  /**\n   * Adds the active class to an item.\n   *\n   * @param item - The element to apply the active class to.\n   */\n  protected addActiveClassToItem(item: HTMLElement): void {\n    item.classList.add(this.activeClass);\n  }\n\n  /**\n   * Adjusts each item's state by listening to slider events.\n   */\n  protected adjustItemStateOnMove(): void {\n    this.zodiac.getEventBus().on([\n      'move.after',\n      'drag.after',\n    ], () => {\n      this.setActiveClass();\n      this.setAccessibilityAttributes();\n    });\n  }\n\n  /**\n   * Removes the active class from each item in the slider.\n   */\n  protected removeActiveClass(): void {\n    this.zodiac.getItems().forEach((item) => item.classList.remove(this.activeClass));\n  }\n\n  /**\n   * Applies the appropriate attributes for accessibility to each item.\n   *\n   * Items that aren't currently visible will be set as hidden (using\n   * `aria-hidden`) and have a negative tab index applied to them.\n   */\n  protected setAccessibilityAttributes(): void {\n    const { itemsPerView } = this.options;\n    const position = this.zodiac.getPosition();\n\n    // Compute a range of visible slide positions based on the the number of\n    // items per view and the current position.\n    const visibleRange = Utilities.range(itemsPerView, position);\n\n    this.zodiac.getItems().forEach((item, index) => {\n      const visible = visibleRange.includes(index);\n\n      // This value must be converted to a string since `setAttribute()`\n      // expects `value` to be a string.\n      const ariaHidden = (!visible).toString();\n\n      item.setAttribute('aria-hidden', ariaHidden);\n      this.setTabindex(item, visible);\n\n      // Collect a list of focusable items within each slider item.\n      const focusableItems = item.querySelectorAll(Utilities.focusableSelectors.join(', '));\n\n      // Set the tab index for each focusable element within each slider item.\n      focusableItems.forEach((element: HTMLElement) => {\n        this.setTabindex(element, visible);\n      });\n    });\n  }\n\n  /**\n   * Sets the active class on the active item and removes it from the rest.\n   *\n   * There can only be one active item at a time. The active item is tracked by\n   * `Zodiac.getPosition()`.\n   */\n  protected setActiveClass(): void {\n    const currentPosition = this.zodiac.getPosition();\n\n    const activeItem = this.zodiac.getItems().item(currentPosition);\n    this.removeActiveClass();\n    this.addActiveClassToItem(activeItem);\n  }\n\n  /**\n   * Applies an indexing attribute to each item.\n   */\n  protected setInitialItemState(): void {\n    this.zodiac.getItems().forEach((item, index) => {\n      item.setAttribute('data-zodiac-item-index', (index + 1).toString());\n    });\n  }\n\n  /**\n   * Sets the tabindex of an element based on whether it is visible.\n   *\n   * @param element - The element to modify.\n   * @param visible - Whether or not the element is active.\n   */\n  protected setTabindex(element: HTMLElement, visible: boolean): void {\n    if (!visible) {\n      element.setAttribute('tabindex', '-1');\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\n\n/**\n * Manipulates the width of the slider track and each slider item.\n */\nexport class Track extends ComponentBase {\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.setItemWidth();\n    this.setTrackWidth();\n    this.setTrackTransitionDuration();\n    this.updateTrackOnResize();\n  }\n\n  /**\n   * Gets the margin size for slider items by dividing the gap option in half.\n   *\n   * @returns The gap option value divided in half.\n   */\n  protected getSliderItemMargin(): number {\n    return this.options.gap / 2;\n  }\n\n  /**\n   * Retrieves the width of the slider's inner element.\n   *\n   * @returns The width of the slider.\n   */\n  protected getSliderWidth(): number {\n    const selector = this.options.classes.inner;\n    const inner = this.zodiac.getSliderElement().querySelector(`.${selector}`);\n\n    const { width } = inner.getBoundingClientRect();\n\n    return width;\n  }\n\n  /**\n   * Sets the width and margin of each slider item.\n   *\n   * Each slider item's width is calculated by dividing the slider's width by\n   * configured total items per view minus the configured gap setting.\n   */\n  protected setItemWidth(): void {\n    const { itemsPerView } = this.options;\n\n    // Calculate the width of each slider item by dividing the total size of\n    // the inner slider by the total items per view.\n    this.zodiac.setItemWidth(this.getSliderWidth() / itemsPerView);\n\n    const sliderItemMargin = this.getSliderItemMargin();\n\n    this.zodiac.getItems().forEach((item) => {\n      // Apply the width to the slide item.\n      item.style.width = `${this.zodiac.getItemWidth() - sliderItemMargin * 2}px`;\n\n      // Add spacing between each slider item with left and right margin.\n      item.style.marginLeft = `${sliderItemMargin}px`;\n      item.style.marginRight = `${sliderItemMargin}px`;\n    });\n  }\n\n  /**\n   * Applies the transition speed setting to the track.\n   */\n  protected setTrackTransitionDuration(): void {\n    const { transitionSpeed } = this.options;\n    this.zodiac.getTrackElement().style.transitionDuration = `${transitionSpeed}ms`;\n  }\n\n  /**\n   * Set the width of the track element.\n   *\n   * The width of track element is equal to the width of the slider multiplied\n   * by the total number of items.\n   */\n  protected setTrackWidth(): void {\n    const trackWidth = this.zodiac.getItemWidth() * this.zodiac.getItems().length;\n\n    this.zodiac.getTrackElement().style.width = `${trackWidth}px`;\n  }\n\n  /**\n   * Update the track and item width when the window is resized.\n   */\n  protected updateTrackOnResize(): void {\n    this.zodiac.getEventBus().on(['rebuildEffectiveOptions.after'], () => {\n      this.zodiac.getEventBus().emit(['trackUpdated.before']);\n      this.setItemWidth();\n      this.setTrackWidth();\n      this.setTrackTransitionDuration();\n      this.zodiac.getEventBus().emit(['trackUpdated.after']);\n    });\n  }\n\n}\n","import Zodiac from '../zodiac';\n\nimport { ComponentBase } from './componentBase';\nimport { Utilities } from '../utilities';\n\ntype DragEvent = MouseEvent | TouchEvent;\n\n/**\n * A map of events that will represent dragging.\n */\ninterface DragEventMap {\n  'mousedown': DragEvent,\n  'mousemove': DragEvent,\n  'mouseleave': DragEvent,\n  'mouseup': DragEvent,\n  'touchcancel': DragEvent,\n  'touchend': DragEvent,\n  'touchmove': DragEvent,\n  'touchstart': DragEvent,\n}\n\ntype EventKey = keyof DragEventMap;\n\n/**\n * Adds dragging capabilities to the slider (for both mouse & touch inputs).\n */\nexport class Drag extends ComponentBase {\n\n  /**\n   * The class used to indicate that the slider is being dragged.\n   */\n  protected readonly draggingClass = 'dragging';\n\n  /**\n   * The value used to track and apply the `translate` CSS while dragging.\n   */\n  protected dragPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.move()` method.\n   */\n  protected moveController: AbortController = null;\n\n  /**\n   * Events that move the slider when dragging.\n   */\n  protected readonly moveEventKeys: EventKey[] = [\n    'mousemove',\n    'touchmove',\n  ];\n\n  /**\n   * A flag used to determine whether the clicking of links is disallowed.\n   */\n  protected preventClick = false;\n\n  /**\n   * The position that will be given to `Zodiac` after the dragging has stopped.\n   */\n  protected snapPosition = 0;\n\n  /**\n   * Events that signal when dragging should begin.\n   */\n  protected readonly startEventKeys: EventKey[] = [\n    'mousedown',\n    'touchstart',\n  ];\n\n  /**\n   * The position of the event dispatcher at the start of the dragging process.\n   */\n  protected startingEventPosition = 0;\n\n  /**\n   * The `AbortController` for the `this.stop()` method.\n   */\n  protected stopController: AbortController = null;\n\n  /**\n   * Events that signal when dragging should end.\n   */\n  protected readonly stopEventKeys: EventKey[] = [\n    'mouseup',\n    'mouseleave',\n    'touchend',\n    'touchcancel',\n  ];\n\n  /**\n   * How far the slider must be dragged before moving begins.\n   */\n  protected readonly threshold = 20;\n\n  /**\n   * {@inheritDoc ComponentBase.mount}\n   */\n  public mount(zodiac: Zodiac): void {\n    super.mount(zodiac);\n\n    this.addStartEvents();\n    this.onDragEvents();\n    this.preventDefaultOnDragStart();\n    this.preventDefaultClickOnDragStart();\n  }\n\n  /**\n   * Applies the move events to the slider.\n   */\n  protected addMoveEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.moveController = new AbortController();\n\n    this.moveEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.move(event), { signal: this.moveController.signal });\n    });\n  }\n\n  /**\n   * Applies the start events to the slider.\n   */\n  protected addStartEvents(): void {\n    this.startEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, (event) => this.start(event));\n    });\n  }\n\n  /**\n   * Applies the stop events to the slider.\n   */\n  protected addStopEvents(): void {\n    // Create an `AbortController` to remove these events after dragging is\n    // complete. This controller is recreated every time this method is called\n    // because it will be disabled after it's `abort` signal is sent.\n    this.stopController = new AbortController();\n\n    this.stopEventKeys.forEach((eventType) => {\n      this.zodiac.getTrackElement().addEventListener(eventType, () => this.stop(), { signal: this.stopController.signal });\n    });\n  }\n\n  /**\n   * Retrieves the `screenX` value from an event depending on the event type.\n   *\n   * @param event - The event in which to derive the `screenX` value.\n   *\n   * @returns The `screenX` value of the event.\n   */\n  protected getScreenX(event: DragEvent): number {\n    if (event instanceof TouchEvent) {\n      return event.touches[0].screenX ?? 0;\n    }\n\n    return event.screenX;\n  }\n\n  /**\n   * Snaps a drag position into a valid `Zodiac` position.\n   *\n   * The `Drag` component tracks the drag position with a pixel value to\n   * animate dragging. This method snaps a drag position into valid `Zodiac`\n   * position to set the active slide.\n   *\n   * @param dragPosition - The position in pixels.\n   *\n   * @returns The position as a numeric index.\n   */\n  protected getSnapPosition(dragPosition: number): number {\n    let snapPosition = -Math.round(dragPosition / this.zodiac.getItemWidth());\n\n    const itemTotal = this.zodiac.getItemTotal();\n\n    // If the calculated position is greater than the total number of slider\n    // items then restart at the beginning.\n    if (snapPosition > itemTotal) {\n      snapPosition = 0;\n    }\n\n    // If the calculated position is less than zero then move to the end of\n    // the slider.\n    if (snapPosition < 0) {\n      snapPosition = itemTotal;\n    }\n\n    return snapPosition;\n  }\n\n  /**\n   * Mark all links within the slider track as draggable or un-draggable.\n   *\n   * Depending on the value of `draggable`, links within the slider track will\n   * be enabled or disabled by swapping between storing the link in an `href`\n   * or `data-href` attribute and toggling the `draggable` attribute.\n   *\n   * @param draggable - Whether to mark the items as draggable or un-draggable.\n   */\n  protected modifyLinks(draggable: boolean): void {\n    // Retrieve all links within the track element.\n    const links = this.zodiac.getTrackElement().querySelectorAll('a');\n\n    // Prevent unnecessary modification by checking if the draggable value\n    // matches the prevent click state.\n    if (this.preventClick === draggable) {\n      links.forEach((link) => {\n        // Determine the source and destination of the attribute modification\n        // based on the whether draggability is being enabled or disabled.\n        const source = draggable ? 'data-href' : 'href';\n        const destination = draggable ? 'href' : 'data-href';\n\n        // Add or remove the draggable attribute on the link element.\n        link.draggable = draggable;\n\n        link.setAttribute(destination, link.getAttribute(source));\n        link.removeAttribute(source);\n      });\n\n      // Indicate click has or hasn't been prevented.\n      this.preventClick = !this.preventClick;\n    }\n  }\n\n  /**\n   * Calculates & updates the position of the slider track on drag.\n   *\n   * During the move stage of the dragging, this method has the following side\n   * effects:\n   * - Calculates the dragging distance based on where the user clicked or\n   *   touched.\n   * - Determines how fast the slider should be dragged based on how close to\n   *   the edge the mouse cursor is moved.\n   * - Computes which slide to snap to after dragging is complete.\n   * - Animates the slider track while dragging.\n   *\n   * @param event - The DOM event emitted during the drag movement.\n   */\n  protected move(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.move.before']);\n\n    // Determine the distance between the position of current event dispatcher\n    // the starting event dispatcher position.\n    const currentEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n    const distance = currentEventPosition - this.startingEventPosition;\n\n    // Exit this method if the distance is less than the drag threshold.\n    if (Math.abs(distance) < this.threshold) {\n      return;\n    }\n\n    // Increase the acceleration speed based on how far the user has dragged\n    // the slider.\n    const accelerate = Utilities.rangeMap(Math.abs(distance), this.threshold, window.innerWidth, 1, 3);\n    // Determine by drag position by adding distance multiplied by the\n    // acceleration speed.\n    const dragPosition = this.dragPosition + (distance * accelerate);\n\n    event.preventDefault();\n\n    // Get the snap position from the current drag position.\n    this.snapPosition = this.getSnapPosition(dragPosition);\n    // Animate the dragging.\n    this.zodiac.getTrackElement().style.transform = `translate3d(${dragPosition}px, 0, 0)`;\n\n    this.zodiac.getEventBus().emit(['drag.move.after']);\n  }\n\n  /**\n   * Adds the `dragging` class to the slider track while it is being dragged.\n   */\n  protected onDragEvents(): void {\n    this.zodiac.getEventBus().on(['drag.before'], () => {\n      this.zodiac.getTrackElement().classList.add(this.draggingClass);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      this.zodiac.getTrackElement().classList.remove(this.draggingClass);\n    });\n  }\n\n  /**\n   * Prevent link clicking when the slider is being dragged.\n   */\n  protected preventDefaultClickOnDragStart(): void {\n    this.zodiac.getEventBus().on(['drag.move.before'], () => {\n      this.modifyLinks(false);\n    });\n\n    this.zodiac.getEventBus().on(['drag.after'], () => {\n      // Wait for the slider to finishing animating before enabling the links.\n      setTimeout(() => {\n        this.modifyLinks(true);\n      }, this.options.transitionSpeed);\n    });\n  }\n\n  /**\n   * Prevents unnecessary dragging for slider items.\n   */\n  protected preventDefaultOnDragStart(): void {\n    this.zodiac.getItems().forEach((item) => {\n      item.addEventListener('dragstart', (event) => event.preventDefault());\n    });\n  }\n\n  /**\n   * Removes the move events from the slider to prevent unnecessary calculations.\n   */\n  protected removeMoveEvents(): void {\n    this.moveController.abort();\n  }\n\n  /**\n   * Removes the stop events from the slider to prevent unnecessary calculations.\n   */\n  protected removeStopEvents(): void {\n    this.stopController.abort();\n  }\n\n  /**\n   * Prepares the slider to be dragged when dragging has started.\n   *\n   * The slider is prepared by calculating the current drag position, relative\n   * to the `Zodiac`'s current position, and the position of the event\n   * dispatcher.\n   *\n   * @param event - The DOM event which fired this method.\n   */\n  protected start(event: DragEvent): void {\n    this.zodiac.getEventBus().emit(['drag.before']);\n\n    // Calculate the drag position by multiplying the slider's current position\n    // by the width of a single slide. The value of this calculation is\n    // converted to a negative number to animate the slider since it will\n    // eventually be passed into `translate3d`.\n    this.dragPosition = -Math.abs(this.zodiac.getPosition() * this.zodiac.getItemWidth());\n\n    this.snapPosition = this.getSnapPosition(this.dragPosition);\n\n    // Determine the position of the event dispatcher by subtracting the event\n    // dispatcher's position on the screen by the slider's offset of it's\n    // parent element.\n    this.startingEventPosition = this.getScreenX(event) - this.zodiac.getSliderElement().offsetLeft;\n\n    this.addMoveEvents();\n    this.addStopEvents();\n  }\n\n  /**\n   * Positions the slider after the dragging is complete.\n   */\n  protected stop(): void {\n    this.zodiac.setPosition(this.snapPosition);\n    this.zodiac.move(this.snapPosition);\n\n    this.removeMoveEvents();\n    this.removeStopEvents();\n\n    this.zodiac.getEventBus().emit(['drag.after']);\n  }\n\n}\n","import { EventBus } from './events/eventBus';\nimport { Options, OptionsInterface } from './options';\n\nimport { ComponentInterface, UpdateEffectiveOptions } from './components/componentBase';\nimport { Autoplay } from './components/autoplay';\nimport { Controls } from './components/controls';\nimport { ItemState } from './components/itemState';\nimport { Track } from './components/track';\nimport { Drag } from './components/drag';\n\n/**\n * The entry point for the Zodiac Slider.\n *\n * This class contains all properties and methods shared between each component.\n *\n * Components are mounted in `Zodiac.mount()`. This function iterates over each\n * component, invoking their `mount()` method & supplying itself as an argument.\n */\nexport default class Zodiac {\n\n  /**\n   * The slider components.\n   */\n  protected components: ComponentInterface[];\n\n  /**\n   * The event bus.\n   */\n  protected eventBus: EventBus;\n\n  /**\n   * The slider items.\n   */\n  protected items: NodeListOf<HTMLElement>;\n\n  /**\n   * The width of each slider item.\n   */\n  protected itemWidth: number;\n\n  /**\n   * The slider options.\n   */\n  protected options: Options;\n\n  /**\n   * The slider's current position in the item sequence (zero-indexed).\n   */\n  protected position: number;\n\n  /**\n   * The CSS selector for identifying the slider.\n   */\n  protected selector: string;\n\n  /**\n   * The element on which the slider has been initialized.\n   */\n  protected readonly sliderElement: HTMLElement;\n\n  /**\n   * The slider track element.\n   */\n  protected readonly trackElement: HTMLElement;\n\n  /**\n   * Constructs a `Zodiac` instance based on the provided selector and options.\n   *\n   * @param selector - The base selector to use.\n   * @param options - The options to initialize the slider with.\n   */\n  public constructor(selector: string, options?: OptionsInterface) {\n    this.eventBus = new EventBus();\n\n    this.selector = selector;\n    this.options = new Options(this.eventBus, options);\n\n    const effectiveOptions = this.options.getEffectiveOptions();\n\n    this.components = this.registerComponents();\n\n    this.sliderElement = document.querySelector(this.selector);\n    this.trackElement = this.sliderElement.querySelector(`.${effectiveOptions.classes.track}`);\n    this.items = this.sliderElement.querySelectorAll(`.${effectiveOptions.classes.items}`);\n\n    this.position = 0;\n\n    // Reposition the slider items on media query change.\n    this.eventBus.on(['trackUpdated.after'], () => this.next(0));\n  }\n\n  /**\n   * Retrieves the slider's effective options.\n   *\n   * @returns The slider's effective options.\n   */\n  public getEffectiveOptions(): OptionsInterface {\n    return this.options.getEffectiveOptions();\n  }\n\n  /**\n   * Retrieves the event bus.\n   *\n   * @returns The event bus.\n   */\n  public getEventBus(): EventBus {\n    return this.eventBus;\n  }\n\n  /**\n   * Retrieves the total number of items.\n   *\n   * @returns The total number of items offset by 1.\n   */\n  public getItemTotal(): number {\n    return this.items.length - 1;\n  }\n\n  /**\n   * Retrieves the width of a slider item.\n   *\n   * @returns The width of individual slider items.\n   */\n  public getItemWidth(): number {\n    return this.itemWidth;\n  }\n\n  /**\n   * Retrieves the slider's items.\n   *\n   * @returns The slider's items.\n   */\n  public getItems(): NodeListOf<HTMLElement> {\n    return this.items;\n  }\n\n  /**\n   * Retrieves the slider's position.\n   *\n   * @returns The position of the slider.\n   */\n  public getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Retrieves the slider element.\n   *\n   * @returns The slider element.\n   */\n  public getSliderElement(): HTMLElement {\n    return this.sliderElement;\n  }\n\n  /**\n   * Retrieves the track element.\n   *\n   * @returns The track element.\n   */\n  public getTrackElement(): HTMLElement {\n    return this.trackElement;\n  }\n\n  /**\n   * Mounts the sliders components.\n   *\n   * @param thirdPartyComponents - A list of user defined components.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public mount(thirdPartyComponents: ComponentInterface[] = []): this {\n    for (const component of this.components.concat(thirdPartyComponents)) {\n      component.mount(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the slider based on the provided offset.\n   *\n   * @param offset - The position to move the slider.\n   */\n  public move(offset: number): void {\n    const transform = -1 * (this.getItemWidth() * offset);\n\n    this.trackElement.style.transform = `translate3d(${transform}px, 0px, 0px)`;\n  }\n\n  /**\n   * Move to the next slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public next(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position + offset;\n\n    if (position > this.getItemTotal()) {\n      position = 0;\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Removes a custom event listener.\n   *\n   * @param names - A list of event names to unsubscribe.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public off(names: string[]): this {\n    this.eventBus.off(names);\n\n    return this;\n  }\n\n  /**\n   * Adds a custom event listener with a callback function.\n   *\n   * @param names - A list of event names to subscribe to.\n   * @param callback - A callback function to run on the events.\n   *\n   * @returns The current `Zodiac` instance.\n   */\n  public on(names: string[], callback: CallableFunction): this {\n    this.eventBus.on(names, callback);\n\n    return this;\n  }\n\n  /**\n   * Move to the previous slide.\n   *\n   * @param offset - How many slides to move forward.\n   */\n  public previous(offset = 1): void {\n    this.eventBus.emit(['move.before']);\n\n    let position = this.getPosition();\n\n    position = position - offset;\n\n    if (position < 0) {\n      position = this.getItemTotal();\n    }\n\n    this.move(position);\n\n    this.setPosition(position);\n\n    this.eventBus.emit(['move.after']);\n  }\n\n  /**\n   * Sets the width of individual slider items.\n   *\n   * @param itemWidth - The new item width.\n   */\n  public setItemWidth(itemWidth: number): void {\n    this.itemWidth = itemWidth;\n  }\n\n  /**\n   * Sets the sliders position.\n   *\n   * @throws {@link RangeError}\n   * Will throw an error if the position is `Nan`, less than zero, or greater\n   * than the total number of items.\n   *\n   * @param position - The position to set.\n   */\n  public setPosition(position: number): void {\n    if (Number.isNaN(position) || position < 0 || position > this.getItemTotal()) {\n      throw new RangeError(`Invalid position: ${position}`);\n    }\n\n    this.position = Math.trunc(position);\n  }\n\n  /**\n   * Registers the required components provided by Zodiac.\n   *\n   * @returns A list of instantiated components.\n   */\n  protected registerComponents(): ComponentInterface[] {\n    return [\n      ItemState,\n      UpdateEffectiveOptions(Track),\n      UpdateEffectiveOptions(Autoplay),\n      Controls,\n      UpdateEffectiveOptions(Drag),\n    ].map((Component) => new Component());\n  }\n\n}\n"],"names":["EventBus","_classCallCheck","this","events","_createClass","key","value","names","_this","_len","arguments","length","args","Array","_key","forEach","name","filterByName","event","callback","apply","_step","_this2","_iterator","_createForOfIteratorHelper","_loop","filter","s","n","done","err","e","f","_this3","push","Options","eventBus","options","undefined","_defineProperty","autoplay","autoplaySpeed","classes","inner","items","track","gap","itemsPerView","pauseOnHover","transitionSpeed","Object","assign","baseOptions","mediaQueryOptions","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","mediaQuery","mediaQueryOptionSet","mediaQueryList","matchMedia","hasClasses","TypeError","mediaQueryLists","addEventListener","rebuildEffectiveOptions","effectiveOptions","values","some","item","emit","list","matches","freeze","ComponentBase","zodiac","getEffectiveOptions","UpdateEffectiveOptions","Base","_Base","_inherits","UpdatingEffectiveOptions","_super","_createSuper","_get","_getPrototypeOf","prototype","call","getEventBus","on","Utilities","size","startAt","_toConsumableArray","keys","map","index","inMin","inMax","outMin","outMax","Autoplay","_ComponentBase","abortController","AbortController","start","pauseOnDrag","pauseOnFocus","abort","stop","focusableSelectors","join","getSliderElement","querySelectorAll","element","_this4","sliderElement","signal","_this5","_this$options","interval","setInterval","next","clearInterval","Controls","setUpControls","nextBtn","querySelector","prevBtn","previous","ItemState","_assertThisInitialized","concat","setActiveClass","setAccessibilityAttributes","setInitialItemState","adjustItemStateOnMove","classList","add","activeClass","getItems","remove","position","getPosition","visibleRange","range","visible","includes","ariaHidden","toString","setAttribute","setTabindex","currentPosition","activeItem","removeActiveClass","addActiveClassToItem","removeAttribute","Track","setItemWidth","setTrackWidth","setTrackTransitionDuration","updateTrackOnResize","selector","getBoundingClientRect","width","getSliderWidth","sliderItemMargin","getSliderItemMargin","style","getItemWidth","marginLeft","marginRight","getTrackElement","transitionDuration","trackWidth","Drag","addStartEvents","onDragEvents","preventDefaultOnDragStart","preventDefaultClickOnDragStart","moveController","moveEventKeys","eventType","move","startEventKeys","stopController","stopEventKeys","_event$touches$0$scre","TouchEvent","touches","screenX","dragPosition","snapPosition","Math","round","itemTotal","getItemTotal","draggable","links","preventClick","link","source","destination","getAttribute","distance","getScreenX","offsetLeft","startingEventPosition","abs","threshold","accelerate","rangeMap","window","innerWidth","preventDefault","getSnapPosition","transform","draggingClass","_this6","modifyLinks","setTimeout","addMoveEvents","addStopEvents","setPosition","removeMoveEvents","removeStopEvents","Zodiac","components","registerComponents","document","trackElement","itemWidth","thirdPartyComponents","mount","offset","off","Number","isNaN","RangeError","trunc","Component"],"mappings":"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"}